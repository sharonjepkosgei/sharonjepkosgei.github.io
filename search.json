[
  {
    "objectID": "research.html",
    "href": "research.html",
    "title": "Courses",
    "section": "",
    "text": "Fall 2023\nSpring 2023\n\n\n\n\nEPPS 6302: Data Collection & Production\n\nAssignment 1\n\nEPPS 6356: Data Visualization\n\n\n\n\n\n\n\n\nCourse Description\n\nThis course introduces students to the use of economic methods of the analysis of public policy.A variety of public policy topics are covered including education, employment and the labor market, taxes and redistribution, access to health care, poverty and inequality, and public assistance programs.\n\n\nAssignment 1\nAssignment 2\nAssignment 3\nAssignment 4\nAssignment 5\nAssignment 6\n\n\n\n\n\n\nCourse Description\n\nThis course introduces students to the use of economic methods of the analysis of public policy.A variety of public policy topics are covered including education, employment and the labor market, taxes and redistribution, access to health care, poverty and inequality, and public assistance programs.\n\n\nResearch Paper"
  },
  {
    "objectID": "research.html#semester",
    "href": "research.html#semester",
    "title": "Courses",
    "section": "",
    "text": "Fall 2023\nSpring 2023\n\n\n\n\nEPPS 6302: Data Collection & Production\n\nAssignment 1\n\nEPPS 6356: Data Visualization\n\n\n\n\n\n\n\n\nCourse Description\n\nThis course introduces students to the use of economic methods of the analysis of public policy.A variety of public policy topics are covered including education, employment and the labor market, taxes and redistribution, access to health care, poverty and inequality, and public assistance programs.\n\n\nAssignment 1\nAssignment 2\nAssignment 3\nAssignment 4\nAssignment 5\nAssignment 6\n\n\n\n\n\n\nCourse Description\n\nThis course introduces students to the use of economic methods of the analysis of public policy.A variety of public policy topics are covered including education, employment and the labor market, taxes and redistribution, access to health care, poverty and inequality, and public assistance programs.\n\n\nResearch Paper"
  },
  {
    "objectID": "informanagement.html",
    "href": "informanagement.html",
    "title": "Sharon Jepkosgei",
    "section": "",
    "text": "Course Description\n\nThis course introduces students to the use of economic methods of the analysis of public policy.A variety of public policy topics are covered including education, employment and the labor market, taxes and redistribution, access to health care, poverty and inequality, and public assistance programs.\n\n\nAssignment 1\nAssignment 2\nAssignment 3\nAssignment 4\nAssignment 5\nAssignment 6"
  },
  {
    "objectID": "informanagement.html#epps-6354-information-management",
    "href": "informanagement.html#epps-6354-information-management",
    "title": "Sharon Jepkosgei",
    "section": "",
    "text": "Course Description\n\nThis course introduces students to the use of economic methods of the analysis of public policy.A variety of public policy topics are covered including education, employment and the labor market, taxes and redistribution, access to health care, poverty and inequality, and public assistance programs.\n\n\nAssignment 1\nAssignment 2\nAssignment 3\nAssignment 4\nAssignment 5\nAssignment 6"
  },
  {
    "objectID": "EPPS_6356_09.html",
    "href": "EPPS_6356_09.html",
    "title": "Assignment 9",
    "section": "",
    "text": "# Plotting time series data using TSstudio\n# install.packages(c(\"quantmod\", \"tidyverse\",\"TSstudio\"))\n# lapply(c(\"quantmod\", \"tidyverse\",\"TSstudio\"), require, character.only = TRUE)\n\nlibrary(TSstudio)\nquantmod::getSymbols(\"AAPL\", src=\"yahoo\")\n\nRegistered S3 method overwritten by 'quantmod':\n  method            from\n  as.zoo.data.frame zoo \n\n\n[1] \"AAPL\"\n\nts_plot(AAPL$AAPL.Adjusted, \n        title = \"Apple Stock prices\",\n        Ytitle = \"\")\n\n\n\n\n#class(AAPL) # What class is this object?"
  },
  {
    "objectID": "EPPS_6356_09.html#map",
    "href": "EPPS_6356_09.html#map",
    "title": "Assignment 9",
    "section": "Map",
    "text": "Map\n\n&lt;div id=\"quarto-navigation-envelope\" class=\"hidden\"&gt;\n&lt;p&gt;&lt;span class=\"hidden\" data-render-id=\"quarto-int-sidebar-title\"&gt;Sharon Jepkosgei&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar-title\"&gt;Sharon Jepkosgei&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:Home\"&gt;Home&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:/index.html\"&gt;/index.html&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:Courses\"&gt;Courses&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:EPPS 6302: Data Collection &amp; Production\"&gt;EPPS 6302: Data Collection &amp; Production&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:/Data_methods.html\"&gt;/Data_methods.html&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:EPPS 6356: Data Visualization\"&gt;EPPS 6356: Data Visualization&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:/Data_visual.html\"&gt;/Data_visual.html&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:EPPS 6354: Information Management\"&gt;EPPS 6354: Information Management&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:/informanagement.html\"&gt;/informanagement.html&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:PPPE 6321: Economics of Public Policy\"&gt;PPPE 6321: Economics of Public Policy&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:/EconPolicy.html\"&gt;/EconPolicy.html&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:Database project\"&gt;Database project&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:Final presentation\"&gt;Final presentation&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:/Final Presentation.pdf\"&gt;/Final Presentation.pdf&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:Final Paper\"&gt;Final Paper&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:/Sharon_Jepkosgei_Project_epps6354.pdf\"&gt;/Sharon_Jepkosgei_Project_epps6354.pdf&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:Proposal Presentation\"&gt;Proposal Presentation&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:/Database Proposal Presentation.pdf\"&gt;/Database Proposal Presentation.pdf&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:Explore Care App\"&gt;Explore Care App&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:https://sharonjepkosgei.shinyapps.io/ExploreApp/\"&gt;https://sharonjepkosgei.shinyapps.io/ExploreApp/&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:Blog\"&gt;Blog&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar://blog//index.html\"&gt;//blog//index.html&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:CV\"&gt;CV&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:/Sharon CV.pdf\"&gt;/Sharon CV.pdf&lt;/span&gt;&lt;/p&gt;\n&lt;/div&gt;\n&lt;div id=\"quarto-meta-markdown\" class=\"hidden\"&gt;\n&lt;p&gt;&lt;span class=\"hidden\" data-render-id=\"quarto-metatitle\"&gt;Sharon Jepkosgei - Assignment 9&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-twittercardtitle\"&gt;Sharon Jepkosgei - Assignment 9&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-ogcardtitle\"&gt;Sharon Jepkosgei - Assignment 9&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-metasitename\"&gt;Sharon Jepkosgei&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-twittercarddesc\"&gt;&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-ogcardddesc\"&gt;&lt;/span&gt;&lt;/p&gt;\n&lt;/div&gt;\n&lt;/section&gt;\n\n&lt;/main&gt; &lt;!-- /main --&gt;\n&lt;script id = \"quarto-html-after-body\" type=\"application/javascript\"&gt;\nwindow.document.addEventListener(\"DOMContentLoaded\", function (event) {\n  const toggleBodyColorMode = (bsSheetEl) =&gt; {\n    const mode = bsSheetEl.getAttribute(\"data-mode\");\n    const bodyEl = window.document.querySelector(\"body\");\n    if (mode === \"dark\") {\n      bodyEl.classList.add(\"quarto-dark\");\n      bodyEl.classList.remove(\"quarto-light\");\n    } else {\n      bodyEl.classList.add(\"quarto-light\");\n      bodyEl.classList.remove(\"quarto-dark\");\n    }\n  }\n  const toggleBodyColorPrimary = () =&gt; {\n    const bsSheetEl = window.document.querySelector(\"link#quarto-bootstrap\");\n    if (bsSheetEl) {\n      toggleBodyColorMode(bsSheetEl);\n    }\n  }\n  toggleBodyColorPrimary();  \n  const icon = \"\";\n  const anchorJS = new window.AnchorJS();\n  anchorJS.options = {\n    placement: 'right',\n    icon: icon\n  };\n  anchorJS.add('.anchored');\n  const isCodeAnnotation = (el) =&gt; {\n    for (const clz of el.classList) {\n      if (clz.startsWith('code-annotation-')) {                     \n        return true;\n      }\n    }\n    return false;\n  }\n  const clipboard = new window.ClipboardJS('.code-copy-button', {\n    text: function(trigger) {\n      const codeEl = trigger.previousElementSibling.cloneNode(true);\n      for (const childEl of codeEl.children) {\n        if (isCodeAnnotation(childEl)) {\n          childEl.remove();\n        }\n      }\n      return codeEl.innerText;\n    }\n  });\n  clipboard.on('success', function(e) {\n    // button target\n    const button = e.trigger;\n    // don't keep focus\n    button.blur();\n    // flash \"checked\"\n    button.classList.add('code-copy-button-checked');\n    var currentTitle = button.getAttribute(\"title\");\n    button.setAttribute(\"title\", \"Copied!\");\n    let tooltip;\n    if (window.bootstrap) {\n      button.setAttribute(\"data-bs-toggle\", \"tooltip\");\n      button.setAttribute(\"data-bs-placement\", \"left\");\n      button.setAttribute(\"data-bs-title\", \"Copied!\");\n      tooltip = new bootstrap.Tooltip(button, \n        { trigger: \"manual\", \n          customClass: \"code-copy-button-tooltip\",\n          offset: [0, -8]});\n      tooltip.show();    \n    }\n    setTimeout(function() {\n      if (tooltip) {\n        tooltip.hide();\n        button.removeAttribute(\"data-bs-title\");\n        button.removeAttribute(\"data-bs-toggle\");\n        button.removeAttribute(\"data-bs-placement\");\n      }\n      button.setAttribute(\"title\", currentTitle);\n      button.classList.remove('code-copy-button-checked');\n    }, 1000);\n    // clear code selection\n    e.clearSelection();\n  });\n  function tippyHover(el, contentFn) {\n    const config = {\n      allowHTML: true,\n      content: contentFn,\n      maxWidth: 500,\n      delay: 100,\n      arrow: false,\n      appendTo: function(el) {\n          return el.parentElement;\n      },\n      interactive: true,\n      interactiveBorder: 10,\n      theme: 'quarto',\n      placement: 'bottom-start'\n    };\n    window.tippy(el, config); \n  }\n  const noterefs = window.document.querySelectorAll('a[role=\"doc-noteref\"]');\n  for (var i=0; i&lt;noterefs.length; i++) {\n    const ref = noterefs[i];\n    tippyHover(ref, function() {\n      // use id or data attribute instead here\n      let href = ref.getAttribute('data-footnote-href') || ref.getAttribute('href');\n      try { href = new URL(href).hash; } catch {}\n      const id = href.replace(/^#\\/?/, \"\");\n      const note = window.document.getElementById(id);\n      return note.innerHTML;\n    });\n  }\n      let selectedAnnoteEl;\n      const selectorForAnnotation = ( cell, annotation) =&gt; {\n        let cellAttr = 'data-code-cell=\"' + cell + '\"';\n        let lineAttr = 'data-code-annotation=\"' +  annotation + '\"';\n        const selector = 'span[' + cellAttr + '][' + lineAttr + ']';\n        return selector;\n      }\n      const selectCodeLines = (annoteEl) =&gt; {\n        const doc = window.document;\n        const targetCell = annoteEl.getAttribute(\"data-target-cell\");\n        const targetAnnotation = annoteEl.getAttribute(\"data-target-annotation\");\n        const annoteSpan = window.document.querySelector(selectorForAnnotation(targetCell, targetAnnotation));\n        const lines = annoteSpan.getAttribute(\"data-code-lines\").split(\",\");\n        const lineIds = lines.map((line) =&gt; {\n          return targetCell + \"-\" + line;\n        })\n        let top = null;\n        let height = null;\n        let parent = null;\n        if (lineIds.length &gt; 0) {\n            //compute the position of the single el (top and bottom and make a div)\n            const el = window.document.getElementById(lineIds[0]);\n            top = el.offsetTop;\n            height = el.offsetHeight;\n            parent = el.parentElement.parentElement;\n          if (lineIds.length &gt; 1) {\n            const lastEl = window.document.getElementById(lineIds[lineIds.length - 1]);\n            const bottom = lastEl.offsetTop + lastEl.offsetHeight;\n            height = bottom - top;\n          }\n          if (top !== null && height !== null && parent !== null) {\n            // cook up a div (if necessary) and position it \n            let div = window.document.getElementById(\"code-annotation-line-highlight\");\n            if (div === null) {\n              div = window.document.createElement(\"div\");\n              div.setAttribute(\"id\", \"code-annotation-line-highlight\");\n              div.style.position = 'absolute';\n              parent.appendChild(div);\n            }\n            div.style.top = top - 2 + \"px\";\n            div.style.height = height + 4 + \"px\";\n            let gutterDiv = window.document.getElementById(\"code-annotation-line-highlight-gutter\");\n            if (gutterDiv === null) {\n              gutterDiv = window.document.createElement(\"div\");\n              gutterDiv.setAttribute(\"id\", \"code-annotation-line-highlight-gutter\");\n              gutterDiv.style.position = 'absolute';\n              const codeCell = window.document.getElementById(targetCell);\n              const gutter = codeCell.querySelector('.code-annotation-gutter');\n              gutter.appendChild(gutterDiv);\n            }\n            gutterDiv.style.top = top - 2 + \"px\";\n            gutterDiv.style.height = height + 4 + \"px\";\n          }\n          selectedAnnoteEl = annoteEl;\n        }\n      };\n      const unselectCodeLines = () =&gt; {\n        const elementsIds = [\"code-annotation-line-highlight\", \"code-annotation-line-highlight-gutter\"];\n        elementsIds.forEach((elId) =&gt; {\n          const div = window.document.getElementById(elId);\n          if (div) {\n            div.remove();\n          }\n        });\n        selectedAnnoteEl = undefined;\n      };\n      // Attach click handler to the DT\n      const annoteDls = window.document.querySelectorAll('dt[data-target-cell]');\n      for (const annoteDlNode of annoteDls) {\n        annoteDlNode.addEventListener('click', (event) =&gt; {\n          const clickedEl = event.target;\n          if (clickedEl !== selectedAnnoteEl) {\n            unselectCodeLines();\n            const activeEl = window.document.querySelector('dt[data-target-cell].code-annotation-active');\n            if (activeEl) {\n              activeEl.classList.remove('code-annotation-active');\n            }\n            selectCodeLines(clickedEl);\n            clickedEl.classList.add('code-annotation-active');\n          } else {\n            // Unselect the line\n            unselectCodeLines();\n            clickedEl.classList.remove('code-annotation-active');\n          }\n        });\n      }\n  const findCites = (el) =&gt; {\n    const parentEl = el.parentElement;\n    if (parentEl) {\n      const cites = parentEl.dataset.cites;\n      if (cites) {\n        return {\n          el,\n          cites: cites.split(' ')\n        };\n      } else {\n        return findCites(el.parentElement)\n      }\n    } else {\n      return undefined;\n    }\n  };\n  var bibliorefs = window.document.querySelectorAll('a[role=\"doc-biblioref\"]');\n  for (var i=0; i&lt;bibliorefs.length; i++) {\n    const ref = bibliorefs[i];\n    const citeInfo = findCites(ref);\n    if (citeInfo) {\n      tippyHover(citeInfo.el, function() {\n        var popup = window.document.createElement('div');\n        citeInfo.cites.forEach(function(cite) {\n          var citeDiv = window.document.createElement('div');\n          citeDiv.classList.add('hanging-indent');\n          citeDiv.classList.add('csl-entry');\n          var biblioDiv = window.document.getElementById('ref-' + cite);\n          if (biblioDiv) {\n            citeDiv.innerHTML = biblioDiv.innerHTML;\n          }\n          popup.appendChild(citeDiv);\n        });\n        return popup.innerHTML;\n      });\n    }\n  }\n});\n&lt;/script&gt;\n&lt;/div&gt; &lt;!-- /content --&gt;\n\n&lt;/body&gt;\n\n&lt;/html&gt;"
  },
  {
    "objectID": "EPPS_6356_05.html",
    "href": "EPPS_6356_05.html",
    "title": "EPPS 6356 Assignment 5",
    "section": "",
    "text": "Code Here\n#load dataset\nroaddeaths &lt;- read.csv(\"Road traffic accidents.csv\")\n# Filter the dataset for the year 2019\nyear_2019_data &lt;- subset(roaddeaths, Year == 2019)\n# Filter the dataset for USA\nusa&lt;- subset(roaddeaths, Country == \"United States of America\" \n                   & Age.Group == \"[All]\" & Sex == \"All\")\n\n# Access the \"Number\" column from the dataframe\nusa_numbers &lt;- usa$Number\n\n# Create a histogram\nhist(usa_numbers, \n     main = \"Distribution of USA Road Accident Deaths\",\n     xlab = \"Number of Road Deaths\",\n     ylab = \"Frequency\",\n     col = \"darkslategrey\",  # Bar color\n     border = \"black\",   # Border color\n     xlim = c(min(usa_numbers), max(usa_numbers)),  # Set the x-axis limits\n     axes = TRUE,         # Show axes\n     labels = FALSE,       # Remove labels\n     probability = FALSE)  # Set to FALSE to get frequency and not probability density"
  },
  {
    "objectID": "EPPS_6356_05.html#histogram",
    "href": "EPPS_6356_05.html#histogram",
    "title": "EPPS 6356 Assignment 5",
    "section": "",
    "text": "Code Here\n#load dataset\nroaddeaths &lt;- read.csv(\"Road traffic accidents.csv\")\n# Filter the dataset for the year 2019\nyear_2019_data &lt;- subset(roaddeaths, Year == 2019)\n# Filter the dataset for USA\nusa&lt;- subset(roaddeaths, Country == \"United States of America\" \n                   & Age.Group == \"[All]\" & Sex == \"All\")\n\n# Access the \"Number\" column from the dataframe\nusa_numbers &lt;- usa$Number\n\n# Create a histogram\nhist(usa_numbers, \n     main = \"Distribution of USA Road Accident Deaths\",\n     xlab = \"Number of Road Deaths\",\n     ylab = \"Frequency\",\n     col = \"darkslategrey\",  # Bar color\n     border = \"black\",   # Border color\n     xlim = c(min(usa_numbers), max(usa_numbers)),  # Set the x-axis limits\n     axes = TRUE,         # Show axes\n     labels = FALSE,       # Remove labels\n     probability = FALSE)  # Set to FALSE to get frequency and not probability density"
  },
  {
    "objectID": "EPPS_6356_05.html#barchart",
    "href": "EPPS_6356_05.html#barchart",
    "title": "EPPS 6356 Assignment 5",
    "section": "Barchart",
    "text": "Barchart\n\nbase R\n\n1. Horizontal\n\n\nCode Here\n#load dataset\nroaddeaths &lt;- read.csv(\"Road traffic accidents.csv\")\n# Filter the dataset for the year 2019\nusa_2019 &lt;- subset(roaddeaths, Country == \"United States of America\" \n                   & Age.Group != \"[All]\" & Age.Group != \"[Unknown]\"\n                   & Year == 2019 & Sex == \"All\")\n\n# Reorder the levels of Age.Group\nusa_2019$Age.Group &lt;- factor(usa_2019$Age.Group, \n                             levels = c(\"[0]\", \"[1-4]\", \"[5-9]\", \"[10-14]\", \"[15-19]\",\n                                        \"[20-24]\", \"[25-29]\", \"[30-34]\", \"[35-39]\",\n                                        \"[40-44]\", \"[45-49]\", \"[50-54]\", \"[55-59]\", \n                                        \"[60-64]\", \"[65-69]\", \"[70-74]\", \"[75-79]\", \n                                        \"[80-84]\", \"[85+]\"))\n\n# Create a matrix of values for the barplot (using \"Number\" as width)\nbarplot_matrix &lt;- t(table(usa_2019$Age.Group) * usa_2019$Number)\n\n# Create the horizontal bar plot\nbarplot(barplot_matrix, beside = TRUE, col = \"darkslategrey\", horiz = TRUE,\n        main = \"Road Accident Deaths in the USA by Age Group (2019)\",\n        ylab = \"Age Group\", xlab = \"Number of Road Traffic Accidents\")\n\n\n\n\n\n\n\n2. Vertical\n\n\nCode Here\n#load dataset\nroaddeaths &lt;- read.csv(\"Road traffic accidents.csv\")\n# Filter the dataset for the year 2019\nyear_2019_data &lt;- subset(roaddeaths, Year == 2019)\n# Define the list of countries you want to select\nselected_countries &lt;- c(\"United States of America\", \"Germany\", \"Japan\",\n                        \"United Kingdom of Great Britain and Northern Ireland\", \"Italy\", \"Canada\", \"France\")\n\n# Filter the dataset for the selected countries\nselected_data &lt;- subset(roaddeaths, Country %in% selected_countries \n                        & Age.Group == \"[All]\" & Sex != \"All\" & Year == 2019)\n# Define custom colors for the gender\ncustom_colors &lt;- c(\"Male\" = \"orchid\", \"Female\" = \"darkslategrey\")\n\n# Create the bar plot\nbarplot(height = selected_data$Number, beside = TRUE, col = custom_colors,\n        names.arg = selected_data$Country.Code,\n        main = \"Road Accident Deaths for G7 Countries (2019)\",\n        xlab = \"Country\", ylab = \"Number of Road Traffic Accidents\")\n\n# Add a legend\nlegend(\"center\", legend = names(custom_colors), fill = custom_colors)\n\n\n\n\n\n\n\n\nggplot2\n\n1. Horizontal\n\n\nCode Here\n#Load the necessary libraries\nlibrary(ggplot2)\nlibrary(dplyr)\n#load dataset\nroaddeaths &lt;- read.csv(\"Road traffic accidents.csv\")\n# Filter the dataset for the year 2019\nyear_2019_data &lt;- subset(roaddeaths, Year == 2019)\n# Filter the dataset for USA\nusa_2019 &lt;- subset(year_2019_data, Country == \"United States of America\" \n                   & Age.Group != \"[All]\" & Age.Group != \"[Unknown]\")\n\n# Reorder the levels of Age.Group\nusa_2019$Age.Group &lt;- factor(usa_2019$Age.Group, \n                             levels = c(\"[0]\", \"[1-4]\", \"[5-9]\", \"[10-14]\", \"[15-19]\",\n                                        \"[20-24]\", \"[25-29]\", \"[30-34]\", \"[35-39]\",\n                                        \"[40-44]\", \"[45-49]\", \"[50-54]\", \"[55-59]\", \n                                        \"[60-64]\", \"[65-69]\", \"[70-74]\", \"[75-79]\", \n                                        \"[80-84]\", \"[85+]\"))\n\n# Create the bar plot\n\nggplot(usa_2019, aes(x = Number)) +\n  geom_bar(aes(y = Age.Group), position = \"dodge\", stat = \"identity\", fill = \"darkslategrey\") +\n  labs(\n    title = \"Road Accident Deaths in the USA by Age Group (2019)\",\n    x = \"Number of Road Traffic Accidents\",\n    y = \"Age Group\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n\n\n2.Vertical\n\n\nCode Here\n# Load necessary libraries if not already loaded\nlibrary(dplyr)\nlibrary(ggplot2)\n#load dataset\nroaddeaths &lt;- read.csv(\"Road traffic accidents.csv\")\n# Filter the dataset for the year 2019\nyear_2019_data &lt;- subset(roaddeaths, Year == 2019)\n# Define the list of countries you want to select\nselected_countries &lt;- c(\"United States of America\", \"Germany\", \"Japan\",\n\"United Kingdom of Great Britain and Northern Ireland\", \"Italy\", \"Canada\", \"France\")\n\n# Filter the dataset for the selected countries\nselected_data &lt;- subset(roaddeaths, Country %in% selected_countries \n                        & Age.Group == \"[All]\" & Sex != \"All\" & Year == 2019)\n# Define custom colors for the gender\ncustom_colors &lt;- c(\"Male\" = \"orchid\", \"Female\" = \"darkslategrey\")\n\n# Create the bar plot\nggplot(selected_data, aes(x = Country.Code, y = Number, fill = Sex)) +\n  geom_bar(position = \"dodge\", stat = \"identity\") +\n  labs(\n    title = \"Road Accident Deaths by Gender for G7 Countries (2019)\",\n    x = \"Country\",\n    y = \"Number of Road Traffic Accidents\"\n  ) +\n  scale_fill_manual(values = custom_colors) +  # Specify custom colors\n  theme_minimal()"
  },
  {
    "objectID": "EPPS_6356_03.html",
    "href": "EPPS_6356_03.html",
    "title": "Epps 6356: Assignment 3",
    "section": "",
    "text": "Using RGraphics\n\n\nCode Here\ndata(anscombe)  # Load Anscombe's data\n\n# Set a serif font for text\npar(family = \"serif\")\n\n# Create four model objects\nlm1 &lt;- lm(y1 ~ x1, data = anscombe)\nlm2 &lt;- lm(y2 ~ x2, data = anscombe)\nlm3 &lt;- lm(y3 ~ x3, data = anscombe)\nlm4 &lt;- lm(y4 ~ x4, data = anscombe)\n\n## Fancy version (per help file)\n\nff &lt;- y ~ x\nmods &lt;- setNames(as.list(1:4), paste0(\"lm\", 1:4))\n\n# Use a for loop to create and store linear regression models of the four datasets\nfor (i in 1:4) {\n  ff[2:3] &lt;- lapply(paste0(c(\"y\", \"x\"), i), as.name)\n  mods[[i]] &lt;- lmi &lt;- lm(ff, data = anscombe)\n}\n# Apply coefficient\nsapply(mods, coef)\n\n\n                  lm1      lm2       lm3       lm4\n(Intercept) 3.0000909 3.000909 3.0024545 3.0017273\nx1          0.5000909 0.500000 0.4997273 0.4999091\n\n\nCode Here\nlapply(mods, function(fm) coef(summary(fm)))\n\n\n$lm1\n             Estimate Std. Error  t value    Pr(&gt;|t|)\n(Intercept) 3.0000909  1.1247468 2.667348 0.025734051\nx1          0.5000909  0.1179055 4.241455 0.002169629\n\n$lm2\n            Estimate Std. Error  t value    Pr(&gt;|t|)\n(Intercept) 3.000909  1.1253024 2.666758 0.025758941\nx2          0.500000  0.1179637 4.238590 0.002178816\n\n$lm3\n             Estimate Std. Error  t value    Pr(&gt;|t|)\n(Intercept) 3.0024545  1.1244812 2.670080 0.025619109\nx3          0.4997273  0.1178777 4.239372 0.002176305\n\n$lm4\n             Estimate Std. Error  t value    Pr(&gt;|t|)\n(Intercept) 3.0017273  1.1239211 2.670763 0.025590425\nx4          0.4999091  0.1178189 4.243028 0.002164602\n\n\nCode Here\n# Preparing for the plots (grid)\nop &lt;- par(mfrow = c(2, 2), mar = 0.1 + c(4, 4, 1, 1), oma =  c(0, 0, 2, 0))\n\n# Plot charts using a for loop\nfor (i in 1:4) {\n  ff[2:3] &lt;- lapply(paste0(c(\"y\", \"x\"), i), as.name)\n  plot(ff, data = anscombe, col = \"firebrick\", pch = 18, bg = \"chocolate\", cex = 1.3,\n       xlim = c(3, 19), ylim = c(3, 13), font.main = 2)  # Using font.main for plot title\n  abline(mods[[i]], col = \"navy\")\n}\n\n# Add a title using mtext and specify font\nmtext(\"Anscombe's 4 Regression data sets\", outer = TRUE, cex = 1.5, font = 2)\n\n\n\n\n\nCode Here\n# Reset graphical parameters\npar(op)\n\n\n\n\nPre-hackathon\n\n\nCode Here\nInstalled &lt;- TRUE  # For checking if package is installed\ntoInstall &lt;- c(\"vroom\", \"finalfit\", \"tidyverse\", \"descr\", \"RColorBrewer\", \"scales\")\nif(Installed){install.packages(toInstall, repos = \"http://cran.us.r-project.org\")}\n\n\npackage 'vroom' successfully unpacked and MD5 sums checked\npackage 'finalfit' successfully unpacked and MD5 sums checked\npackage 'tidyverse' successfully unpacked and MD5 sums checked\npackage 'descr' successfully unpacked and MD5 sums checked\npackage 'RColorBrewer' successfully unpacked and MD5 sums checked\npackage 'scales' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\ADMIN\\AppData\\Local\\Temp\\RtmpacvGwc\\downloaded_packages\n\n\nCode Here\nlapply(toInstall, require, character.only = TRUE) # call into library\n\n\n[[1]]\n[1] TRUE\n\n[[2]]\n[1] TRUE\n\n[[3]]\n[1] TRUE\n\n[[4]]\n[1] TRUE\n\n[[5]]\n[1] TRUE\n\n[[6]]\n[1] TRUE\n\n\nCode Here\n# Reading all real time data\n# vroom is the champion in reading github date, &lt; 3 sec.\nowidall = vroom(\"https://github.com/owid/covid-19-data/blob/master/public/data/owid-covid-data.csv?raw=true\")\n\nowideu = subset(owidall, continent==\"Europe\")\n\n# Europe data\ny = owideu$new_deaths\nx = as.Date(owideu$date)\nplot(x,y, pch=20, col=\"#E7298A\", cex = .5, xaxt='n', xlab = \"Date\", ylab = \"COVID Deaths in Europe (Daily)\")\naxis(1, x, format(x, \"%Y-%m\"), cex.axis = .7, las = 3 , gap.axis =1.5, tick = FALSE)\nidentify(x,y,owideu$location, ps=8, atpen=TRUE) # Manually identify cases by mouse click\n\n\n\n\n\ninteger(0)"
  },
  {
    "objectID": "EPPS_6302_06.html",
    "href": "EPPS_6302_06.html",
    "title": "Web Scrapping",
    "section": "",
    "text": "## Workshop: Scraping webpages with R rvest package\n# Prerequisites: Chrome browser, Selector Gadget\n#rm(list = ls())\n#install.packages(\"tidyverse\")\nlibrary(tidyverse)\n\nWarning: package 'tidyverse' was built under R version 4.3.2\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.3     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n#install.packages(\"rvest\")\nlibrary(rvest)\n\n\nAttaching package: 'rvest'\n\nThe following object is masked from 'package:readr':\n\n    guess_encoding\n\nurl &lt;- 'https://en.wikipedia.org/wiki/List_of_countries_by_foreign-exchange_reserves'\n#Reading the HTML code from the Wiki website\nwikiforreserve &lt;- read_html(url)\nclass(wikiforreserve)\n\n[1] \"xml_document\" \"xml_node\"    \n\n## Get the XPath data using Inspect element feature in Safari, Chrome or Firefox\n## At Inspect tab, look for &lt;table class=....&gt; tag. Leave the table close\n## Right click the table and Copy XPath, paste at html_nodes(xpath =)\n\nforeignreserve &lt;- wikiforreserve %&gt;%\n  html_nodes(xpath='//*[@id=\"mw-content-text\"]/div/table[1]') %&gt;%\n  html_table()\nclass(foreignreserve)\n\n[1] \"list\"\n\nfores = foreignreserve[[1]]\n\n\nnames(fores) &lt;- c(\"Rank\", \"Country\", \"Forexres\", \"Date\", \"Change\", \"Sources\")\ncolnames(fores)\n\n[1] \"Rank\"     \"Country\"  \"Forexres\" \"Date\"     \"Change\"   \"Sources\" \n\nhead(fores$Country, n=10)\n\n [1] \"China\"        \"Japan\"        \"Switzerland\"  \"India\"        \"Russia\"      \n [6] \"Taiwan\"       \"Saudi Arabia\" \"Hong Kong\"    \"South Korea\"  \"Brazil\"      \n\n## Clean up variables\n## What type is Rank?\n## How about Date?\n\n# Remove trailing notes in Date variable\nlibrary(stringr)\nfores$newdate = str_split_fixed(fores$Date, \"\\\\[\", n = 2)[, 1]\n\n#Get the csv file\nwrite.csv(fores, \"fores.csv\", row.names = FALSE)\n\n\n## Workshop: Scraping webpages with R rvest package\n## Prerequisites: Chrome browser, Selector Gadget\n\n# Load the tidyverse library for data manipulation and visualization\nlibrary(tidyverse)\n\n# Load the rvest package for web scraping\ninstall.packages(\"rvest\")\n\nWarning: package 'rvest' is in use and will not be installed\n\nlibrary(rvest)\n\n# Define the URL of the IMDb search results page for movies released between January 1, 2022, and January 1, 2023\nurl1 = \"https://www.imdb.com/search/title/?release_date=2022-01-01,2023-01-01\"\n\n# Read the HTML content of the IMDb page\nimdb2022 &lt;- read_html(url1)\n\n# Scrape movie ranks from the page (HTML nodes with class '.text-primary')\nrank_data_html &lt;- html_nodes(imdb2022, '.text-primary')\nrank_data &lt;- as.numeric(html_text(rank_data_html))\n\n# Display the first 10 movie ranks\nhead(rank_data, n = 10)\n\nnumeric(0)\n\n# Scrape movie titles from the page (HTML nodes with class '.lister-item-header a')\ntitle_data_html &lt;- html_nodes(imdb2022, '.lister-item-header a')\ntitle_data &lt;- html_text(title_data_html)\n\n# Display the first 20 movie titles\nhead(title_data, n = 20)\n\ncharacter(0)"
  },
  {
    "objectID": "EPPS_6302_03.html",
    "href": "EPPS_6302_03.html",
    "title": "EPPS 6302: Assignment 3",
    "section": "",
    "text": "Quanteda\n\nPackages Required\n\n\nCode Here\n# Sample program for using quanteda for text modeling and analysis\n# Documentation: vignette(\"quickstart\", package = \"quanteda\")\n# Website: https://quanteda.io/\n\n#install.packages(c(\"readr\",\"quanteda\", \"quanteda.textmodels\", \"quanteda.textplots\",\"quanteda.textstats\",\"tidyverse\"))\nlibrary(quanteda)\nlibrary(quanteda.textmodels)\nlibrary(quanteda.textplots)\nlibrary(readr)\nlibrary(ggplot2)\n\n\n\n\nExample with twitter data: A network plot is created using the “topgat_fcm” feature co-occurrence matrix\n\n\nCode Here\n# Twitter data about President Biden and Xi summit in Novemeber 2021\n# Do some background search/study on the event\n\nsummit &lt;- read_csv(\"https://raw.githubusercontent.com/datageneration/datamethods/master/textanalytics/summit_11162021.csv\")\n\n#View(summit)\n#head(summit)\n# Extract text column from the dataset/df\nsum_twt = summit$text\n#class(sum_twt) # check data type\n# Tokenize the text\ntoks = tokens(sum_twt)\n#class(toks)\n#creates a document-feature matrix (DFM) from the tokens stored in the \"toks\" variable\nsumtwtdfm &lt;- dfm(toks)\n\n# Latent Semantic Analysis\n#textmodel_lsa is a function used to perform Latent Semantic Analysis (LSA) on a dfm \nsum_lsa &lt;- textmodel_lsa(sumtwtdfm)\n#summary(sum_lsa)\n#tokenize the text in the \"sum_twt\" variable while removing punctuation\ntweet_dfm &lt;- tokens(sum_twt, remove_punct = TRUE) %&gt;%\n  dfm() #pass the tokenized data to the dfm() function\n#head(tweet_dfm)\n#dfm_select is a function from the quanteda package used for subsetting a DFM based on a specified pattern\ntag_dfm &lt;- dfm_select(tweet_dfm, pattern = \"#*\") #only tokens that start with the '#' symbol\n#topfeatures is a function used to find the top N features (in this case, hashtags) in a DFM, based on their frequency.\ntoptag &lt;- names(topfeatures(tag_dfm, 50))\n#head(toptag, 10)\n# package generates various types of visualizations related to text data.\nlibrary(\"quanteda.textplots\")\n#fcm (feature co-occurrence matrix) is a function used to create a feature co-occurrence matrix from a DFM.\ntag_fcm &lt;- fcm(tag_dfm)\n#head(tag_fcm)\n#selects features (hashtags) that match the patterns stored in the \"toptag\" variable \ntopgat_fcm &lt;- fcm_select(tag_fcm, pattern = toptag)\n\n\n#a network plot is created using the \"topgat_fcm\" feature co-occurrence matrix\ntextplot_network(topgat_fcm, min_freq = 50, edge_alpha = 0.8, edge_size = 1)\n\n\n\n\n\n\n\nA network plot of top 50 mentions\n\n\nCode Here\n#\"tweet_dfm\" DFM is filtered to include only tokens that start with the '@' symbol, typically representing user mentions\nuser_dfm &lt;- dfm_select(tweet_dfm, pattern = \"@*\")\n#find the top 50 most frequently occurring user mentions\ntopuser &lt;- names(topfeatures(user_dfm, 50))\n#head(topuser, 20)\n#creates a feature co-occurrence matrix\nuser_fcm &lt;- fcm(user_dfm)\n#head(user_fcm, 20)\n\nuser_fcm &lt;- fcm_select(user_fcm, pattern = topuser)\n\ntextplot_network(user_fcm, min_freq = 20, edge_color = \"firebrick\", edge_alpha = 0.8, edge_size = 1)\n\n\n\n\n\n\n\nExample 2: Using presidential speeches\n\n\nCode Here\n# American Presidential speeches\n# Example extracted from https://quanteda.io/articles/pkgdown/examples/plotting.html\n\n#\"quanteda.textstats\" package, which contains functions and tools for text analysis and statistics using the Quanteda framework\nlibrary(quanteda.textstats)\n#corpus containing texts of U.S. presidential inaugural addresses.\ndata_corpus_inaugural_subset &lt;- \n  corpus_subset(data_corpus_inaugural, Year &gt; 1949) # create a subset \nkwic(tokens(data_corpus_inaugural_subset), pattern = \"american\") %&gt;%\n  textplot_xray()\n\n\n\n\n\n\n\nCode Here\ntextplot_xray(\n  kwic(data_corpus_inaugural_subset, pattern = \"american\"),\n  kwic(data_corpus_inaugural_subset, pattern = \"people\"),\n  kwic(data_corpus_inaugural_subset, pattern = \"communist\")\n)"
  },
  {
    "objectID": "Data_visual.html",
    "href": "Data_visual.html",
    "title": "Sharon Jepkosgei",
    "section": "",
    "text": "Course Description\n\nThis course builds data literacy through communicating data patterns, findings and insights via visual representation of data. This course is designed to equip data scientists with data theory, principles and concepts of visualizing data and best practices in visual data analytics. Students will learn the programming tools in generating charts, animated data and interactive contents.\n\n\nProject Proposal\nAssignment 1\nAssignment 2\nAssignment 3\nAssignment 4\nAssignment 5\nAssignment 6\nAssignment 9"
  },
  {
    "objectID": "Data_visual.html#epps-6356-data-visualization",
    "href": "Data_visual.html#epps-6356-data-visualization",
    "title": "Sharon Jepkosgei",
    "section": "",
    "text": "Course Description\n\nThis course builds data literacy through communicating data patterns, findings and insights via visual representation of data. This course is designed to equip data scientists with data theory, principles and concepts of visualizing data and best practices in visual data analytics. Students will learn the programming tools in generating charts, animated data and interactive contents.\n\n\nProject Proposal\nAssignment 1\nAssignment 2\nAssignment 3\nAssignment 4\nAssignment 5\nAssignment 6\nAssignment 9"
  },
  {
    "objectID": "Data_visual.html#map",
    "href": "Data_visual.html#map",
    "title": "Sharon Jepkosgei",
    "section": "Map",
    "text": "Map\n\n&lt;div id=\"quarto-navigation-envelope\" class=\"hidden\"&gt;\n&lt;p&gt;&lt;span class=\"hidden\" data-render-id=\"quarto-int-sidebar-title\"&gt;Sharon Jepkosgei&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar-title\"&gt;Sharon Jepkosgei&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:Home\"&gt;Home&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:/index.html\"&gt;/index.html&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:Courses\"&gt;Courses&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:EPPS 6302: Data Collection &amp; Production\"&gt;EPPS 6302: Data Collection &amp; Production&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:/Data_methods.html\"&gt;/Data_methods.html&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:EPPS 6356: Data Visualization\"&gt;EPPS 6356: Data Visualization&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:/Data_visual.html\"&gt;/Data_visual.html&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:EPPS 6354: Information Management\"&gt;EPPS 6354: Information Management&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:/informanagement.html\"&gt;/informanagement.html&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:PPPE 6321: Economics of Public Policy\"&gt;PPPE 6321: Economics of Public Policy&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:/EconPolicy.html\"&gt;/EconPolicy.html&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:Database project\"&gt;Database project&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:Final presentation\"&gt;Final presentation&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:/Final Presentation.pdf\"&gt;/Final Presentation.pdf&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:Final Paper\"&gt;Final Paper&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:/Sharon_Jepkosgei_Project_epps6354.pdf\"&gt;/Sharon_Jepkosgei_Project_epps6354.pdf&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:Proposal Presentation\"&gt;Proposal Presentation&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:/Database Proposal Presentation.pdf\"&gt;/Database Proposal Presentation.pdf&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:Explore Care App\"&gt;Explore Care App&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:https://sharonjepkosgei.shinyapps.io/ExploreApp/\"&gt;https://sharonjepkosgei.shinyapps.io/ExploreApp/&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:Blog\"&gt;Blog&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar://blog//index.html\"&gt;//blog//index.html&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:CV\"&gt;CV&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:/Sharon CV.pdf\"&gt;/Sharon CV.pdf&lt;/span&gt;&lt;/p&gt;\n&lt;/div&gt;\n&lt;div id=\"quarto-meta-markdown\" class=\"hidden\"&gt;\n&lt;p&gt;&lt;span class=\"hidden\" data-render-id=\"quarto-twittercardtitle\"&gt;&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-ogcardtitle\"&gt;&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-metasitename\"&gt;Sharon Jepkosgei&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-twittercarddesc\"&gt;&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-ogcardddesc\"&gt;&lt;/span&gt;&lt;/p&gt;\n&lt;/div&gt;\n&lt;/section&gt;\n\n&lt;/main&gt; &lt;!-- /main --&gt;\n&lt;script id = \"quarto-html-after-body\" type=\"application/javascript\"&gt;\nwindow.document.addEventListener(\"DOMContentLoaded\", function (event) {\n  const toggleBodyColorMode = (bsSheetEl) =&gt; {\n    const mode = bsSheetEl.getAttribute(\"data-mode\");\n    const bodyEl = window.document.querySelector(\"body\");\n    if (mode === \"dark\") {\n      bodyEl.classList.add(\"quarto-dark\");\n      bodyEl.classList.remove(\"quarto-light\");\n    } else {\n      bodyEl.classList.add(\"quarto-light\");\n      bodyEl.classList.remove(\"quarto-dark\");\n    }\n  }\n  const toggleBodyColorPrimary = () =&gt; {\n    const bsSheetEl = window.document.querySelector(\"link#quarto-bootstrap\");\n    if (bsSheetEl) {\n      toggleBodyColorMode(bsSheetEl);\n    }\n  }\n  toggleBodyColorPrimary();  \n  const icon = \"\";\n  const anchorJS = new window.AnchorJS();\n  anchorJS.options = {\n    placement: 'right',\n    icon: icon\n  };\n  anchorJS.add('.anchored');\n  const isCodeAnnotation = (el) =&gt; {\n    for (const clz of el.classList) {\n      if (clz.startsWith('code-annotation-')) {                     \n        return true;\n      }\n    }\n    return false;\n  }\n  const clipboard = new window.ClipboardJS('.code-copy-button', {\n    text: function(trigger) {\n      const codeEl = trigger.previousElementSibling.cloneNode(true);\n      for (const childEl of codeEl.children) {\n        if (isCodeAnnotation(childEl)) {\n          childEl.remove();\n        }\n      }\n      return codeEl.innerText;\n    }\n  });\n  clipboard.on('success', function(e) {\n    // button target\n    const button = e.trigger;\n    // don't keep focus\n    button.blur();\n    // flash \"checked\"\n    button.classList.add('code-copy-button-checked');\n    var currentTitle = button.getAttribute(\"title\");\n    button.setAttribute(\"title\", \"Copied!\");\n    let tooltip;\n    if (window.bootstrap) {\n      button.setAttribute(\"data-bs-toggle\", \"tooltip\");\n      button.setAttribute(\"data-bs-placement\", \"left\");\n      button.setAttribute(\"data-bs-title\", \"Copied!\");\n      tooltip = new bootstrap.Tooltip(button, \n        { trigger: \"manual\", \n          customClass: \"code-copy-button-tooltip\",\n          offset: [0, -8]});\n      tooltip.show();    \n    }\n    setTimeout(function() {\n      if (tooltip) {\n        tooltip.hide();\n        button.removeAttribute(\"data-bs-title\");\n        button.removeAttribute(\"data-bs-toggle\");\n        button.removeAttribute(\"data-bs-placement\");\n      }\n      button.setAttribute(\"title\", currentTitle);\n      button.classList.remove('code-copy-button-checked');\n    }, 1000);\n    // clear code selection\n    e.clearSelection();\n  });\n  function tippyHover(el, contentFn) {\n    const config = {\n      allowHTML: true,\n      content: contentFn,\n      maxWidth: 500,\n      delay: 100,\n      arrow: false,\n      appendTo: function(el) {\n          return el.parentElement;\n      },\n      interactive: true,\n      interactiveBorder: 10,\n      theme: 'quarto',\n      placement: 'bottom-start'\n    };\n    window.tippy(el, config); \n  }\n  const noterefs = window.document.querySelectorAll('a[role=\"doc-noteref\"]');\n  for (var i=0; i&lt;noterefs.length; i++) {\n    const ref = noterefs[i];\n    tippyHover(ref, function() {\n      // use id or data attribute instead here\n      let href = ref.getAttribute('data-footnote-href') || ref.getAttribute('href');\n      try { href = new URL(href).hash; } catch {}\n      const id = href.replace(/^#\\/?/, \"\");\n      const note = window.document.getElementById(id);\n      return note.innerHTML;\n    });\n  }\n      let selectedAnnoteEl;\n      const selectorForAnnotation = ( cell, annotation) =&gt; {\n        let cellAttr = 'data-code-cell=\"' + cell + '\"';\n        let lineAttr = 'data-code-annotation=\"' +  annotation + '\"';\n        const selector = 'span[' + cellAttr + '][' + lineAttr + ']';\n        return selector;\n      }\n      const selectCodeLines = (annoteEl) =&gt; {\n        const doc = window.document;\n        const targetCell = annoteEl.getAttribute(\"data-target-cell\");\n        const targetAnnotation = annoteEl.getAttribute(\"data-target-annotation\");\n        const annoteSpan = window.document.querySelector(selectorForAnnotation(targetCell, targetAnnotation));\n        const lines = annoteSpan.getAttribute(\"data-code-lines\").split(\",\");\n        const lineIds = lines.map((line) =&gt; {\n          return targetCell + \"-\" + line;\n        })\n        let top = null;\n        let height = null;\n        let parent = null;\n        if (lineIds.length &gt; 0) {\n            //compute the position of the single el (top and bottom and make a div)\n            const el = window.document.getElementById(lineIds[0]);\n            top = el.offsetTop;\n            height = el.offsetHeight;\n            parent = el.parentElement.parentElement;\n          if (lineIds.length &gt; 1) {\n            const lastEl = window.document.getElementById(lineIds[lineIds.length - 1]);\n            const bottom = lastEl.offsetTop + lastEl.offsetHeight;\n            height = bottom - top;\n          }\n          if (top !== null && height !== null && parent !== null) {\n            // cook up a div (if necessary) and position it \n            let div = window.document.getElementById(\"code-annotation-line-highlight\");\n            if (div === null) {\n              div = window.document.createElement(\"div\");\n              div.setAttribute(\"id\", \"code-annotation-line-highlight\");\n              div.style.position = 'absolute';\n              parent.appendChild(div);\n            }\n            div.style.top = top - 2 + \"px\";\n            div.style.height = height + 4 + \"px\";\n            let gutterDiv = window.document.getElementById(\"code-annotation-line-highlight-gutter\");\n            if (gutterDiv === null) {\n              gutterDiv = window.document.createElement(\"div\");\n              gutterDiv.setAttribute(\"id\", \"code-annotation-line-highlight-gutter\");\n              gutterDiv.style.position = 'absolute';\n              const codeCell = window.document.getElementById(targetCell);\n              const gutter = codeCell.querySelector('.code-annotation-gutter');\n              gutter.appendChild(gutterDiv);\n            }\n            gutterDiv.style.top = top - 2 + \"px\";\n            gutterDiv.style.height = height + 4 + \"px\";\n          }\n          selectedAnnoteEl = annoteEl;\n        }\n      };\n      const unselectCodeLines = () =&gt; {\n        const elementsIds = [\"code-annotation-line-highlight\", \"code-annotation-line-highlight-gutter\"];\n        elementsIds.forEach((elId) =&gt; {\n          const div = window.document.getElementById(elId);\n          if (div) {\n            div.remove();\n          }\n        });\n        selectedAnnoteEl = undefined;\n      };\n      // Attach click handler to the DT\n      const annoteDls = window.document.querySelectorAll('dt[data-target-cell]');\n      for (const annoteDlNode of annoteDls) {\n        annoteDlNode.addEventListener('click', (event) =&gt; {\n          const clickedEl = event.target;\n          if (clickedEl !== selectedAnnoteEl) {\n            unselectCodeLines();\n            const activeEl = window.document.querySelector('dt[data-target-cell].code-annotation-active');\n            if (activeEl) {\n              activeEl.classList.remove('code-annotation-active');\n            }\n            selectCodeLines(clickedEl);\n            clickedEl.classList.add('code-annotation-active');\n          } else {\n            // Unselect the line\n            unselectCodeLines();\n            clickedEl.classList.remove('code-annotation-active');\n          }\n        });\n      }\n  const findCites = (el) =&gt; {\n    const parentEl = el.parentElement;\n    if (parentEl) {\n      const cites = parentEl.dataset.cites;\n      if (cites) {\n        return {\n          el,\n          cites: cites.split(' ')\n        };\n      } else {\n        return findCites(el.parentElement)\n      }\n    } else {\n      return undefined;\n    }\n  };\n  var bibliorefs = window.document.querySelectorAll('a[role=\"doc-biblioref\"]');\n  for (var i=0; i&lt;bibliorefs.length; i++) {\n    const ref = bibliorefs[i];\n    const citeInfo = findCites(ref);\n    if (citeInfo) {\n      tippyHover(citeInfo.el, function() {\n        var popup = window.document.createElement('div');\n        citeInfo.cites.forEach(function(cite) {\n          var citeDiv = window.document.createElement('div');\n          citeDiv.classList.add('hanging-indent');\n          citeDiv.classList.add('csl-entry');\n          var biblioDiv = window.document.getElementById('ref-' + cite);\n          if (biblioDiv) {\n            citeDiv.innerHTML = biblioDiv.innerHTML;\n          }\n          popup.appendChild(citeDiv);\n        });\n        return popup.innerHTML;\n      });\n    }\n  }\n});\n&lt;/script&gt;\n&lt;/div&gt; &lt;!-- /content --&gt;\n\n&lt;/body&gt;\n\n&lt;/html&gt;"
  },
  {
    "objectID": "data method project.html",
    "href": "data method project.html",
    "title": "Project",
    "section": "",
    "text": "&lt;div id=\"quarto-navigation-envelope\" class=\"hidden\"&gt;\n&lt;p&gt;&lt;span class=\"hidden\" data-render-id=\"quarto-int-sidebar-title\"&gt;Sharon Jepkosgei&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar-title\"&gt;Sharon Jepkosgei&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:Home\"&gt;Home&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:/index.html\"&gt;/index.html&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:Courses\"&gt;Courses&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:EPPS 6302: Data Collection &amp; Production\"&gt;EPPS 6302: Data Collection &amp; Production&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:/Data_methods.html\"&gt;/Data_methods.html&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:EPPS 6356: Data Visualization\"&gt;EPPS 6356: Data Visualization&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:/Data_visual.html\"&gt;/Data_visual.html&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:EPPS 6354: Information Management\"&gt;EPPS 6354: Information Management&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:/informanagement.html\"&gt;/informanagement.html&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:PPPE 6321: Economics of Public Policy\"&gt;PPPE 6321: Economics of Public Policy&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:/EconPolicy.html\"&gt;/EconPolicy.html&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:Database project\"&gt;Database project&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:Final presentation\"&gt;Final presentation&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:/Final Presentation.pdf\"&gt;/Final Presentation.pdf&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:Final Paper\"&gt;Final Paper&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:/Sharon_Jepkosgei_Project_epps6354.pdf\"&gt;/Sharon_Jepkosgei_Project_epps6354.pdf&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:Proposal Presentation\"&gt;Proposal Presentation&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:/Database Proposal Presentation.pdf\"&gt;/Database Proposal Presentation.pdf&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:Explore Care App\"&gt;Explore Care App&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:https://sharonjepkosgei.shinyapps.io/ExploreApp/\"&gt;https://sharonjepkosgei.shinyapps.io/ExploreApp/&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:Blog\"&gt;Blog&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar://blog//index.html\"&gt;//blog//index.html&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:CV\"&gt;CV&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:/Sharon CV.pdf\"&gt;/Sharon CV.pdf&lt;/span&gt;&lt;/p&gt;\n&lt;/div&gt;\n&lt;div id=\"quarto-meta-markdown\" class=\"hidden\"&gt;\n&lt;p&gt;&lt;span class=\"hidden\" data-render-id=\"quarto-metatitle\"&gt;Sharon Jepkosgei - Project&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-twittercardtitle\"&gt;Sharon Jepkosgei - Project&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-ogcardtitle\"&gt;Sharon Jepkosgei - Project&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-metasitename\"&gt;Sharon Jepkosgei&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-twittercarddesc\"&gt;&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-ogcardddesc\"&gt;&lt;/span&gt;&lt;/p&gt;\n&lt;/div&gt;\n\n&lt;/main&gt; &lt;!-- /main --&gt;\n&lt;script id = \"quarto-html-after-body\" type=\"application/javascript\"&gt;\nwindow.document.addEventListener(\"DOMContentLoaded\", function (event) {\n  const toggleBodyColorMode = (bsSheetEl) =&gt; {\n    const mode = bsSheetEl.getAttribute(\"data-mode\");\n    const bodyEl = window.document.querySelector(\"body\");\n    if (mode === \"dark\") {\n      bodyEl.classList.add(\"quarto-dark\");\n      bodyEl.classList.remove(\"quarto-light\");\n    } else {\n      bodyEl.classList.add(\"quarto-light\");\n      bodyEl.classList.remove(\"quarto-dark\");\n    }\n  }\n  const toggleBodyColorPrimary = () =&gt; {\n    const bsSheetEl = window.document.querySelector(\"link#quarto-bootstrap\");\n    if (bsSheetEl) {\n      toggleBodyColorMode(bsSheetEl);\n    }\n  }\n  toggleBodyColorPrimary();  \n  const icon = \"\";\n  const anchorJS = new window.AnchorJS();\n  anchorJS.options = {\n    placement: 'right',\n    icon: icon\n  };\n  anchorJS.add('.anchored');\n  const isCodeAnnotation = (el) =&gt; {\n    for (const clz of el.classList) {\n      if (clz.startsWith('code-annotation-')) {                     \n        return true;\n      }\n    }\n    return false;\n  }\n  const clipboard = new window.ClipboardJS('.code-copy-button', {\n    text: function(trigger) {\n      const codeEl = trigger.previousElementSibling.cloneNode(true);\n      for (const childEl of codeEl.children) {\n        if (isCodeAnnotation(childEl)) {\n          childEl.remove();\n        }\n      }\n      return codeEl.innerText;\n    }\n  });\n  clipboard.on('success', function(e) {\n    // button target\n    const button = e.trigger;\n    // don't keep focus\n    button.blur();\n    // flash \"checked\"\n    button.classList.add('code-copy-button-checked');\n    var currentTitle = button.getAttribute(\"title\");\n    button.setAttribute(\"title\", \"Copied!\");\n    let tooltip;\n    if (window.bootstrap) {\n      button.setAttribute(\"data-bs-toggle\", \"tooltip\");\n      button.setAttribute(\"data-bs-placement\", \"left\");\n      button.setAttribute(\"data-bs-title\", \"Copied!\");\n      tooltip = new bootstrap.Tooltip(button, \n        { trigger: \"manual\", \n          customClass: \"code-copy-button-tooltip\",\n          offset: [0, -8]});\n      tooltip.show();    \n    }\n    setTimeout(function() {\n      if (tooltip) {\n        tooltip.hide();\n        button.removeAttribute(\"data-bs-title\");\n        button.removeAttribute(\"data-bs-toggle\");\n        button.removeAttribute(\"data-bs-placement\");\n      }\n      button.setAttribute(\"title\", currentTitle);\n      button.classList.remove('code-copy-button-checked');\n    }, 1000);\n    // clear code selection\n    e.clearSelection();\n  });\n  function tippyHover(el, contentFn) {\n    const config = {\n      allowHTML: true,\n      content: contentFn,\n      maxWidth: 500,\n      delay: 100,\n      arrow: false,\n      appendTo: function(el) {\n          return el.parentElement;\n      },\n      interactive: true,\n      interactiveBorder: 10,\n      theme: 'quarto',\n      placement: 'bottom-start'\n    };\n    window.tippy(el, config); \n  }\n  const noterefs = window.document.querySelectorAll('a[role=\"doc-noteref\"]');\n  for (var i=0; i&lt;noterefs.length; i++) {\n    const ref = noterefs[i];\n    tippyHover(ref, function() {\n      // use id or data attribute instead here\n      let href = ref.getAttribute('data-footnote-href') || ref.getAttribute('href');\n      try { href = new URL(href).hash; } catch {}\n      const id = href.replace(/^#\\/?/, \"\");\n      const note = window.document.getElementById(id);\n      return note.innerHTML;\n    });\n  }\n      let selectedAnnoteEl;\n      const selectorForAnnotation = ( cell, annotation) =&gt; {\n        let cellAttr = 'data-code-cell=\"' + cell + '\"';\n        let lineAttr = 'data-code-annotation=\"' +  annotation + '\"';\n        const selector = 'span[' + cellAttr + '][' + lineAttr + ']';\n        return selector;\n      }\n      const selectCodeLines = (annoteEl) =&gt; {\n        const doc = window.document;\n        const targetCell = annoteEl.getAttribute(\"data-target-cell\");\n        const targetAnnotation = annoteEl.getAttribute(\"data-target-annotation\");\n        const annoteSpan = window.document.querySelector(selectorForAnnotation(targetCell, targetAnnotation));\n        const lines = annoteSpan.getAttribute(\"data-code-lines\").split(\",\");\n        const lineIds = lines.map((line) =&gt; {\n          return targetCell + \"-\" + line;\n        })\n        let top = null;\n        let height = null;\n        let parent = null;\n        if (lineIds.length &gt; 0) {\n            //compute the position of the single el (top and bottom and make a div)\n            const el = window.document.getElementById(lineIds[0]);\n            top = el.offsetTop;\n            height = el.offsetHeight;\n            parent = el.parentElement.parentElement;\n          if (lineIds.length &gt; 1) {\n            const lastEl = window.document.getElementById(lineIds[lineIds.length - 1]);\n            const bottom = lastEl.offsetTop + lastEl.offsetHeight;\n            height = bottom - top;\n          }\n          if (top !== null && height !== null && parent !== null) {\n            // cook up a div (if necessary) and position it \n            let div = window.document.getElementById(\"code-annotation-line-highlight\");\n            if (div === null) {\n              div = window.document.createElement(\"div\");\n              div.setAttribute(\"id\", \"code-annotation-line-highlight\");\n              div.style.position = 'absolute';\n              parent.appendChild(div);\n            }\n            div.style.top = top - 2 + \"px\";\n            div.style.height = height + 4 + \"px\";\n            let gutterDiv = window.document.getElementById(\"code-annotation-line-highlight-gutter\");\n            if (gutterDiv === null) {\n              gutterDiv = window.document.createElement(\"div\");\n              gutterDiv.setAttribute(\"id\", \"code-annotation-line-highlight-gutter\");\n              gutterDiv.style.position = 'absolute';\n              const codeCell = window.document.getElementById(targetCell);\n              const gutter = codeCell.querySelector('.code-annotation-gutter');\n              gutter.appendChild(gutterDiv);\n            }\n            gutterDiv.style.top = top - 2 + \"px\";\n            gutterDiv.style.height = height + 4 + \"px\";\n          }\n          selectedAnnoteEl = annoteEl;\n        }\n      };\n      const unselectCodeLines = () =&gt; {\n        const elementsIds = [\"code-annotation-line-highlight\", \"code-annotation-line-highlight-gutter\"];\n        elementsIds.forEach((elId) =&gt; {\n          const div = window.document.getElementById(elId);\n          if (div) {\n            div.remove();\n          }\n        });\n        selectedAnnoteEl = undefined;\n      };\n      // Attach click handler to the DT\n      const annoteDls = window.document.querySelectorAll('dt[data-target-cell]');\n      for (const annoteDlNode of annoteDls) {\n        annoteDlNode.addEventListener('click', (event) =&gt; {\n          const clickedEl = event.target;\n          if (clickedEl !== selectedAnnoteEl) {\n            unselectCodeLines();\n            const activeEl = window.document.querySelector('dt[data-target-cell].code-annotation-active');\n            if (activeEl) {\n              activeEl.classList.remove('code-annotation-active');\n            }\n            selectCodeLines(clickedEl);\n            clickedEl.classList.add('code-annotation-active');\n          } else {\n            // Unselect the line\n            unselectCodeLines();\n            clickedEl.classList.remove('code-annotation-active');\n          }\n        });\n      }\n  const findCites = (el) =&gt; {\n    const parentEl = el.parentElement;\n    if (parentEl) {\n      const cites = parentEl.dataset.cites;\n      if (cites) {\n        return {\n          el,\n          cites: cites.split(' ')\n        };\n      } else {\n        return findCites(el.parentElement)\n      }\n    } else {\n      return undefined;\n    }\n  };\n  var bibliorefs = window.document.querySelectorAll('a[role=\"doc-biblioref\"]');\n  for (var i=0; i&lt;bibliorefs.length; i++) {\n    const ref = bibliorefs[i];\n    const citeInfo = findCites(ref);\n    if (citeInfo) {\n      tippyHover(citeInfo.el, function() {\n        var popup = window.document.createElement('div');\n        citeInfo.cites.forEach(function(cite) {\n          var citeDiv = window.document.createElement('div');\n          citeDiv.classList.add('hanging-indent');\n          citeDiv.classList.add('csl-entry');\n          var biblioDiv = window.document.getElementById('ref-' + cite);\n          if (biblioDiv) {\n            citeDiv.innerHTML = biblioDiv.innerHTML;\n          }\n          popup.appendChild(citeDiv);\n        });\n        return popup.innerHTML;\n      });\n    }\n  }\n});\n&lt;/script&gt;\n&lt;/div&gt; &lt;!-- /content --&gt;\n\n&lt;/body&gt;\n\n&lt;/html&gt;"
  },
  {
    "objectID": "Cheat Sheet.html",
    "href": "Cheat Sheet.html",
    "title": "Cheat Sheet",
    "section": "",
    "text": "Clear global environment use code below:\nrm(list = ls())\n\nSave dataframe to computer\n\n# Assuming you have a dataframe named samplecomment\n# Define the directory path and filename\n#directory_path &lt;- \"C:/Users/ADMIN/Desktop/Data Methods/Data\"\n#file_name &lt;- \"samplecomment.csv\"\n\n# Combine the directory path and filename using file.path()\n#file_path &lt;- file.path(directory_path, file_name)\n\n# Save the samplecomment dataframe to the specified file path as a CSV file\n#write.csv(samplecomment, file_path)\n\n# The dataframe will be saved as \"samplecomment.csv\" in the specified directory"
  },
  {
    "objectID": "Data_methods.html",
    "href": "Data_methods.html",
    "title": "Sharon Jepkosgei",
    "section": "",
    "text": "Course Description\n\nThis course introduces data collection and production methods in the big data age. It aims at providing a comprehensive framework in understanding data, and how social scientists conduct research starting from the data generation process. It covers a variety of data production methods from surveys, interviews to experiments, and data collection methods including web data, social media data and complex data. It is designed to equip social scientists with data generation concepts, tools, and best practices.\n\n\nProject\nAssignment 1\nAssignment 2\nAssignment 3\nAssignment 4\nAssignment 5\nAssignment 6\nAssignment 7"
  },
  {
    "objectID": "Data_methods.html#epps-6302-data-collection-production",
    "href": "Data_methods.html#epps-6302-data-collection-production",
    "title": "Sharon Jepkosgei",
    "section": "",
    "text": "Course Description\n\nThis course introduces data collection and production methods in the big data age. It aims at providing a comprehensive framework in understanding data, and how social scientists conduct research starting from the data generation process. It covers a variety of data production methods from surveys, interviews to experiments, and data collection methods including web data, social media data and complex data. It is designed to equip social scientists with data generation concepts, tools, and best practices.\n\n\nProject\nAssignment 1\nAssignment 2\nAssignment 3\nAssignment 4\nAssignment 5\nAssignment 6\nAssignment 7"
  },
  {
    "objectID": "EconPolicy.html",
    "href": "EconPolicy.html",
    "title": "Sharon Jepkosgei",
    "section": "",
    "text": "Course Description\n\nThis course introduces students to the use of economic methods of the analysis of public policy.A variety of public policy topics are covered including education, employment and the labor market, taxes and redistribution, access to health care, poverty and inequality, and public assistance programs.\n\n\nResearch Paper"
  },
  {
    "objectID": "EconPolicy.html#pppe-6321-economics-of-public-policy",
    "href": "EconPolicy.html#pppe-6321-economics-of-public-policy",
    "title": "Sharon Jepkosgei",
    "section": "",
    "text": "Course Description\n\nThis course introduces students to the use of economic methods of the analysis of public policy.A variety of public policy topics are covered including education, employment and the labor market, taxes and redistribution, access to health care, poverty and inequality, and public assistance programs.\n\n\nResearch Paper"
  },
  {
    "objectID": "EPPS_6302_02.html",
    "href": "EPPS_6302_02.html",
    "title": "EPPS 6302: Assignment 2",
    "section": "",
    "text": "Part A: Building a Qualtrics Panel\nAdding Panel:\n\nGo to Directories (Left-upper menu)\nThen Lists and create list.\n\n\n\nMy Panel\n\n\n\n\n\nPart B: Google Trends Data\n\n\nCode\n\ninstall.packages(“gtrendsR”)\nlibrary(gtrendsR)\nBidenTrumpElection = gtrends(c(“Trump”,“Biden”,“election”), time = “all”)\npar(family=“Georgia”)\nplot(BidenTrumpElection)\n\n\n\n\n\n\n\n\nDifferences\n\nAutomation\n\ngtrendsR allows you to automate the data retrieval process using R scripts. This can save you time and effort compared to manually visiting the Google Trends website each time.\n\nData Processing\n\nWith gtrendsR, you can process and analyze Google Trends data directly within R, making it easier to perform complex analyses, create visualizations, and combine Google Trends data with other datasets.\n\nCustomization\n\nWhile the Google Trends website offers customization options, gtrendsR provides finer control over data retrieval parameters, such as date ranges and geographic regions. You can also specify additional query parameters not available on the website.\nExample:\nOne keyword\nplot(gtrends(“transgender”, time = “all”))\n\nAdjust geographic region\nplot(gtrends(c(“transgender”), geo = c(“US”,“GB”,“TW”), time = “all”))\n\n\n\n\n\nMultiple Keywords\nplot(gtrends(c(“transgender”, “women right”, “feminism”), time = “all”))"
  },
  {
    "objectID": "EPPS_6302_04.html",
    "href": "EPPS_6302_04.html",
    "title": "Word Cloud",
    "section": "",
    "text": "Code Here\n# Install the easypackages package \n#install.packages(\"easypackages\")\nlibrary(easypackages)\n\n# Load multiple packages using easypackage function \"packages\"\npackages(\"XML\",\"wordcloud\",\"RColorBrewer\",\"readr\",\"NLP\",\"tm\",\"quanteda\", prompt = T)\n\n\n# Read the comments from a CSV file\ndataset &lt;- read_csv(\"https://raw.githubusercontent.com/sharonjepkosgei/sharonjepkosgei.github.io/main/nbc_videos.csv\")\n#head(dataset)\n\n# Extract the 'description' column from the CSV as a character vector\nvid_des &lt;- dataset$description\n#head(vid_des)\n#vid_toks &lt;- tokens(vid_des)\n# Create a corpus from the video description\ncorpus &lt;- Corpus(VectorSource(vid_des))\n\n# remove punctuation\ncorpus &lt;- tm_map(corpus, removePunctuation)\n# remove numbers\ncorpus &lt;- tm_map(corpus, removeNumbers)\n# remove stopwords\ncorpus &lt;- tm_map(corpus, function(x) removeWords(x,stopwords(\"english\")))\n# Create Term Document Matrix\n\n# Create Term Document Matrix\n\nwords_to_remove &lt;- c(\"said\",\"from\",\"what\",\"told\",\"over\",\"more\",\"other\",\"have\",\"last\",\"with\",\"this\",\"that\",\"such\",\"when\",\"been\",\"says\",\"will\",\"also\",\"where\",\"why\",\"would\",\"today\", \"now\", \"two\")\ncorpus &lt;- tm_map(corpus, removeWords, words_to_remove)\n\ntdm &lt;- TermDocumentMatrix(corpus)\n#inspect(tdm)\n\nm &lt;- as.matrix(tdm)\nwordCounts &lt;- rowSums(m)\nwordCounts &lt;- sort(wordCounts, decreasing=TRUE)\n#head(wordCounts)\n\n\n# Create Wordcloud\ncloudFrame&lt;-data.frame(word=names(wordCounts),freq=wordCounts)\nset.seed(1234)\nwordcloud(cloudFrame$word,cloudFrame$freq)\n\n\n\n\n\n\n# Create a bar plot for the top words\ntop_words &lt;- head(wordCounts, 10)  \nbarplot(top_words, main=\"Top Words in Video Descriptions\", \n        ylab=\"Frequency\", col=\"darkslategrey\", las=2)\n\n\n\n\n\n#word cloud\n\n\nwordcloud(names(wordCounts),wordCounts, min.freq=5,random.order=FALSE, max.words=500,scale=c(2.5,0.5), rot.per=0.35,colors=brewer.pal(8,\"Dark2\"))"
  },
  {
    "objectID": "EPPS_6356_02.html",
    "href": "EPPS_6356_02.html",
    "title": "EPPS 6356: Assignment 2",
    "section": "",
    "text": "Scatterplot\n\n# Create vectors for the data\nyears &lt;- c( 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020)\nrussia &lt;- c(30.5, 31.4, 33.1, 32.6, 33.4, 32.3, 34.3, 34.1, 37.0, 38.1, 37.5, 35.4, 35.1, 34.9, 35.1)\nusa &lt;- c(34.3, 35.9, 36.4, 37.9, 37.2, 38.1, 38.6, 39.0, 38.6, 37.7, 37.2, 38.3, 37.4, 37.4, 39.7)\nchina &lt;- c(41.4, 42.9, 42.5, 39.1, 39.7, 41.4, 41.5, 42.2, 42.2, 43.0, 43.5, 41.7, 41.8, 41.9, 45.6)\n\npar(mar=c(5.1, 4.1, 4.1, 2.1))\n# Create a blank plot window\nplot.new()\n\n# Set up the plotting window with x-axis and y-axis labels\nplot.window(range(years),c(30,50))\n\n# Add data points and lines for Russia, USA, and China\nlines(years, russia, type = \"o\", col = \"magenta\", pch = 19)\nlines(years, usa, type = \"o\", col = \"darkorange\", pch = 17)\nlines(years, china, type = \"o\", col = \"forestgreen\", pch = 15)\n\n# Add a text\ntext(2013, 49, \"Happy Planet Index Score for Countries, 2006 - 2020\n\", cex = 1)\ntext(2006.5, 40.5, \"China\")\ntext(2006.5, 33.5, \"USA\")\ntext(2007.8, 31, \"Russia\")\n\n# Add ticks\naxis(1, at = seq(2006, 2020, by = 2))\naxis(2, at = seq(20, 70, by = 2))\n# Add space at the top of the graph\nbox(bty=\"u\")\n# Add titles and annotations\nmtext(\"Happy Planet Index Score\", side=2, line=2, cex=0.8)\nmtext(\"Year\", side = 1, line = 2, cex = 0.8)\n\n\n\n\n\n\nScatterplot 2\n\n# showing different functions\n\nx &lt;- c(0.5, 2, 4, 8, 12, 16)\ny1 &lt;- c(1, 1.3, 1.9, 3.4, 3.9, 4.8)\ny2 &lt;- c(4, .8, .5, .45, .4, .3)\n\n# Setting label orientation, margins c(bottom, left, top, right) & text size\npar(las=1, mar=c(4, 4, 2, 4), cex=.7) \nplot.new()\nplot.window(range(x), c(0, 8))\nlines(x, y1)\nlines(x, y2)\npoints(x, y1, pch=16, cex=3) # Different cex - makes the points larger  \npoints(x, y2, pch=21, bg=\"firebrick\", cex=3)  # Different background color\npar(col=\"gray50\", fg=\"gray50\", col.axis=\"gray50\")\naxis(1, at=seq(0, 16, 4)) \n# What is the first number standing for? starting value\n# Second number is the end value\n# the last number is the interval\naxis(2, at=seq(0, 6, 2))\naxis(4, at=seq(0, 6, 2))\nbox(bty=\"u\")\nmtext(\"Travel Time (s)\", side=1, line=2, cex=0.8)\nmtext(\"Responses per Travel\", side=2, line=2, las=0, cex=0.8)\nmtext(\"Responses per Second\", side=4, line=2, las=0, cex=0.8)\ntext(4, 5, \"Bird 131\")\n\n\n\npar(mar=c(5.1, 4.1, 4.1, 2.1), col=\"black\", fg=\"black\", col.axis=\"black\")\n\n\n\nPiechart\n\npar(mar=c(0, 2, 1, 2), xpd=FALSE, cex=0.5)\npie.sales &lt;- c(0.12, 0.3, 0.26, 0.16, 0.04, 0.12)\nnames(pie.sales) &lt;- c(\"Blueberry\", \"Cherry\",\n                      \"Apple\", \"Boston Cream\", \"Other\", \"Vanilla\")\npie(pie.sales, col = gray(seq(0.3,1.0,length=6)))\n\n\n\n\n\n\nPersp\n\nx &lt;- seq(-10, 10, length= 30)\ny &lt;- x\nf &lt;- function(x,y) { r &lt;- sqrt(x^2+y^2); 10 * sin(r)/r }\nz &lt;- outer(x, y, f)\nz[is.na(z)] &lt;- 1\n# 0.5 to include z axis label\npar(mar=c(0, 0.5, 0, 0), lwd=0.5)\npersp(x, y, z, theta = 30, phi = 30, \n      expand = 0.5)\n\n\n\npar(mar=c(5.1, 4.1, 4.1, 2.1), lwd=1)\n\n\n\nBoxplot\n\npar(mar=c(3, 4.1, 2, 0))\nboxplot(len ~ dose, data = ToothGrowth,\n        boxwex = 0.25, at = 1:3 - 0.2,\n        subset= supp == \"VC\", col=\"white\",\n        xlab=\"\",\n        ylab=\"tooth length\", ylim=c(0,35))\nmtext(\"Vitamin C dose (mg)\", side=1, line=2, cex=0.8)\nboxplot(len ~ dose, data = ToothGrowth, add = TRUE,\n        boxwex = 0.25, at = 1:3 + 0.2,\n        \n        subset= supp == \"OJ\")\nlegend(1.5, 9, c(\"Ascorbic acid\", \"Orange juice\"), \n       fill = c(\"white\", \"gray\"), \n       bty=\"n\")\n\n\n\npar(mar=c(5.1, 4.1, 4.1, 2.1))\n\n\n\nBarplot\n\n# Barplot\npar(mar=c(2, 3.1, 2, 2.1)) \nmidpts &lt;- barplot(VADeaths, \n                  col=gray(0.1 + seq(1, 9, 2)/11), \n                  names=rep(\"\", 4))\nmtext(sub(\" \", \"\\n\", colnames(VADeaths)),\n      at=midpts, side=1, line=0.5, cex=0.5)\ntext(rep(midpts, each=5), apply(VADeaths, 2, cumsum) - VADeaths/2,\n     VADeaths, \n     col=rep(c(\"white\", \"black\"), times=3:2), \n     cex=0.8)\n\n\n\npar(mar=c(5.1, 4.1, 4.1, 2.1))  \n\nHistogram\n\n# Random data\nY &lt;- rnorm(50)\n# Make sure no Y exceed [-3.5, 3.5]\nY[Y &lt; -3.5 | Y &gt; 3.5] &lt;- NA # Selection/set range\nx &lt;- seq(-3.5, 3.5, .1)\ndn &lt;- dnorm(x)\npar(mar=c(4.5, 4.1, 3.1, 0))\nhist(Y, breaks=seq(-3.5, 3.5), ylim=c(0, 0.5), \n     col=\"gray80\", freq=FALSE)\nlines(x, dnorm(x), lwd=2)\n\n\n\npar(mar=c(5.1, 4.1, 4.1, 2.1))\n\nR Graphics Functions\n\npar()\nlines()\npoints()\naxis()\nbox()\ntext()\nmtext()\nhist()\nboxplot()\nlegend()\npersp()\nnames()\npie()"
  },
  {
    "objectID": "EPPS_6356_04.html",
    "href": "EPPS_6356_04.html",
    "title": "EPPS6356: Hackathon",
    "section": "",
    "text": "1. Variable Width Column chart\n\n\nCode Here\n# Load necessary libraries if not already loaded\nlibrary(dplyr)\nlibrary(ggplot2)\n#load dataset\nroaddeaths &lt;- read.csv(\"Road traffic accidents.csv\")\n# Filter the dataset for the year 2019\nyear_2019_data &lt;- subset(roaddeaths, Year == 2019)\n\n# Filter total deaths for all ages and both sexes in 2019\ntotal_deaths_2019 &lt;- year_2019_data %&gt;%\n  filter(Sex == \"All\" & Age.Group == \"[All]\")\n\n# Specify the number of top countries \nT &lt;- 5\n# Get the top 5 countries with the highest road accidents in 2019\ntop_5_countries &lt;- total_deaths_2019 %&gt;%\n  top_n(T, Number)\n#Some calculations for ploting\ntop_5_countries$wc &lt;- cumsum(top_5_countries$Death.rate.per.100.000.population)\ntop_5_countries$sp &lt;-top_5_countries$wc - top_5_countries$Death.rate.per.100.000.population\ntop_5_countries$mp &lt;- with(top_5_countries,sp +(wc-sp)/2)\n# plotting\n\ncustom_colors &lt;- c(\"Brazil\" = \"firebrick\", \"Mexico\" = \"navy\", \n                   \"Russian Federation\" = \"seagreen\", \"Thailand\" = \"chocolate\", \n                   \"United States of America\" = \"orchid\")\nggplot(top_5_countries, aes(ymin= 0)) +\n  geom_rect((aes(xmin = sp, xmax = wc, ymax = Number, fill = Country))) +\n  geom_text(aes(x = mp, y = Number * 0.5, label = c(\"Brazil\", \"Mexico\", \n                                                    \"Russia\", \"Thailand\", \"USA\"))) + \n  theme_bw() + \n  theme(legend.position = \"none\") + \n  labs(\n    title = \"Road Accidents Deaths and Death Rates for Countries with the Highest Mortality\",\n    x = \"Death Rate (per 100,000 population)\",\n    y = \"Number of Road Accident Deaths\",\n  ) +\n  scale_fill_manual(values = custom_colors)\n\n\n\n\n\n\n\n2. Table with Embedded\n\n\nCode Here\n# Load necessary libraries if not already loaded\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(reshape2)\n#load dataset\nroaddeaths &lt;- read.csv(\"Road traffic accidents.csv\")\n# Filter the dataset for the year 2019 $ 2020\nyear_2019_2020_data &lt;- subset(roaddeaths, Year == 2019 | Year == 2020)\n\n# Filter total deaths for all ages and both sexes in 2019 $ 2020\nroad_deaths_2019_2020 &lt;- year_2019_2020_data %&gt;%\n  filter(Sex == \"All\" & Age.Group == \"[All]\")\n\n# Specify the number of top countries\nT &lt;- 4\n# Get the top 4 countries with the highest road accident deaths\ntop_countries&lt;- road_deaths_2019_2020 %&gt;%\n  top_n(T,Number )\n\n# Define custom fill colors\ncustom_colors &lt;- c(\"2019\" = \"darkslategrey\", \"2020\" = \"orchid\")\n# Plot\nggplot(top_countries, aes(x = Country, y = Number, fill = as.factor(Year))) +\n  geom_bar(position = \"dodge\", stat = \"identity\") +\n  facet_grid(~ Country, scales = \"free_y\") +\n  theme(axis.text.x = element_blank()) +\n  labs(title = \"Road Accident Deaths\", x = NULL, y = \"Number of Deaths\") +\n  scale_fill_manual(values = custom_colors)\n\n\n\n\n\n\n\n3. Bar Chart\n\n\nCode Here\n #Load the necessary libraries\nlibrary(ggplot2)\nlibrary(dplyr)\n#load dataset\nroaddeaths &lt;- read.csv(\"Road traffic accidents.csv\")\n# Filter the dataset for the year 2019\nyear_2019_data &lt;- subset(roaddeaths, Year == 2019)\n# Filter the dataset for USA\nusa_2019 &lt;- subset(year_2019_data, Country == \"United States of America\" \n                   & Age.Group != \"[All]\" & Age.Group != \"[Unknown]\")\n\n# Reorder the levels of Age.Group\nusa_2019$Age.Group &lt;- factor(usa_2019$Age.Group, \n                             levels = c(\"[0]\", \"[1-4]\", \"[5-9]\", \"[10-14]\", \"[15-19]\",\n                                        \"[20-24]\", \"[25-29]\", \"[30-34]\", \"[35-39]\",\n                                        \"[40-44]\", \"[45-49]\", \"[50-54]\", \"[55-59]\", \n                                        \"[60-64]\", \"[65-69]\", \"[70-74]\", \"[75-79]\", \n                                        \"[80-84]\", \"[85+]\"))\n\n# Create the bar plot\n\nggplot(usa_2019, aes(x = Number)) +\n  geom_bar(aes(y = Age.Group), position = \"dodge\", stat = \"identity\", fill = \"darkslategrey\") +\n  labs(\n    title = \"Road Accident Deaths in the USA by Age Group (2019)\",\n    x = \"Number of Road Traffic Accidents\",\n    y = \"Age Group\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n\n\n4. Column Chart\n\n\nCode Here\n# Load the necessary libraries\nlibrary(ggplot2)\n#load dataset\nroaddeaths &lt;- read.csv(\"Road traffic accidents.csv\")\n# Filter the dataset for the year 2019\nyear_2019_data &lt;- subset(roaddeaths, Year == 2019)\n# Create a clustered bar chart\n\nggplot(year_2019_data, aes(x = Region)) +\n  geom_col(aes(y = Number, fill = Sex), position = \"dodge\", stat = \"identity\") +\n  scale_fill_manual(values = c(\"Male\" = \"orchid\", \"Female\" = \"chocolate\", \"All\" = \"darkslategrey\")) +\n  labs(\n    title = \"Road Accident Deaths by Gender and Region (2019)\",\n    x = NULL,\n    y = \"Number of Road Traffic Accidents\",\n    fill = \"Gender\"\n  ) +\n  theme_minimal()+\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))"
  },
  {
    "objectID": "EPPS_6356_06.html",
    "href": "EPPS_6356_06.html",
    "title": "Assignment 6",
    "section": "",
    "text": "&lt;/section&gt;\n&lt;section id=\"section-1\" class=\"level2\"&gt;\n&lt;h2&gt;&lt;/h2&gt;\n&lt;div id=\"quarto-navigation-envelope\" class=\"hidden\"&gt;\n&lt;p&gt;&lt;span class=\"hidden\" data-render-id=\"quarto-int-sidebar-title\"&gt;Sharon Jepkosgei&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar-title\"&gt;Sharon Jepkosgei&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:Home\"&gt;Home&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:/index.html\"&gt;/index.html&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:Courses\"&gt;Courses&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:EPPS 6302: Data Collection &amp; Production\"&gt;EPPS 6302: Data Collection &amp; Production&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:/Data_methods.html\"&gt;/Data_methods.html&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:EPPS 6356: Data Visualization\"&gt;EPPS 6356: Data Visualization&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:/Data_visual.html\"&gt;/Data_visual.html&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:EPPS 6354: Information Management\"&gt;EPPS 6354: Information Management&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:/informanagement.html\"&gt;/informanagement.html&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:PPPE 6321: Economics of Public Policy\"&gt;PPPE 6321: Economics of Public Policy&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:/EconPolicy.html\"&gt;/EconPolicy.html&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:Database project\"&gt;Database project&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:Final presentation\"&gt;Final presentation&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:/Final Presentation.pdf\"&gt;/Final Presentation.pdf&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:Final Paper\"&gt;Final Paper&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:/Sharon_Jepkosgei_Project_epps6354.pdf\"&gt;/Sharon_Jepkosgei_Project_epps6354.pdf&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:Proposal Presentation\"&gt;Proposal Presentation&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:/Database Proposal Presentation.pdf\"&gt;/Database Proposal Presentation.pdf&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:Explore Care App\"&gt;Explore Care App&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:https://sharonjepkosgei.shinyapps.io/ExploreApp/\"&gt;https://sharonjepkosgei.shinyapps.io/ExploreApp/&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:Blog\"&gt;Blog&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar://blog//index.html\"&gt;//blog//index.html&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:CV\"&gt;CV&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:/Sharon CV.pdf\"&gt;/Sharon CV.pdf&lt;/span&gt;&lt;/p&gt;\n&lt;/div&gt;\n&lt;div id=\"quarto-meta-markdown\" class=\"hidden\"&gt;\n&lt;p&gt;&lt;span class=\"hidden\" data-render-id=\"quarto-metatitle\"&gt;Sharon Jepkosgei - Assignment 6&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-twittercardtitle\"&gt;Sharon Jepkosgei - Assignment 6&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-ogcardtitle\"&gt;Sharon Jepkosgei - Assignment 6&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-metasitename\"&gt;Sharon Jepkosgei&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-twittercarddesc\"&gt;&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-ogcardddesc\"&gt;&lt;/span&gt;&lt;/p&gt;\n&lt;/div&gt;\n&lt;/section&gt;\n\n&lt;/main&gt; &lt;!-- /main --&gt;\n&lt;script id = \"quarto-html-after-body\" type=\"application/javascript\"&gt;\nwindow.document.addEventListener(\"DOMContentLoaded\", function (event) {\n  const toggleBodyColorMode = (bsSheetEl) =&gt; {\n    const mode = bsSheetEl.getAttribute(\"data-mode\");\n    const bodyEl = window.document.querySelector(\"body\");\n    if (mode === \"dark\") {\n      bodyEl.classList.add(\"quarto-dark\");\n      bodyEl.classList.remove(\"quarto-light\");\n    } else {\n      bodyEl.classList.add(\"quarto-light\");\n      bodyEl.classList.remove(\"quarto-dark\");\n    }\n  }\n  const toggleBodyColorPrimary = () =&gt; {\n    const bsSheetEl = window.document.querySelector(\"link#quarto-bootstrap\");\n    if (bsSheetEl) {\n      toggleBodyColorMode(bsSheetEl);\n    }\n  }\n  toggleBodyColorPrimary();  \n  const icon = \"\";\n  const anchorJS = new window.AnchorJS();\n  anchorJS.options = {\n    placement: 'right',\n    icon: icon\n  };\n  anchorJS.add('.anchored');\n  const isCodeAnnotation = (el) =&gt; {\n    for (const clz of el.classList) {\n      if (clz.startsWith('code-annotation-')) {                     \n        return true;\n      }\n    }\n    return false;\n  }\n  const clipboard = new window.ClipboardJS('.code-copy-button', {\n    text: function(trigger) {\n      const codeEl = trigger.previousElementSibling.cloneNode(true);\n      for (const childEl of codeEl.children) {\n        if (isCodeAnnotation(childEl)) {\n          childEl.remove();\n        }\n      }\n      return codeEl.innerText;\n    }\n  });\n  clipboard.on('success', function(e) {\n    // button target\n    const button = e.trigger;\n    // don't keep focus\n    button.blur();\n    // flash \"checked\"\n    button.classList.add('code-copy-button-checked');\n    var currentTitle = button.getAttribute(\"title\");\n    button.setAttribute(\"title\", \"Copied!\");\n    let tooltip;\n    if (window.bootstrap) {\n      button.setAttribute(\"data-bs-toggle\", \"tooltip\");\n      button.setAttribute(\"data-bs-placement\", \"left\");\n      button.setAttribute(\"data-bs-title\", \"Copied!\");\n      tooltip = new bootstrap.Tooltip(button, \n        { trigger: \"manual\", \n          customClass: \"code-copy-button-tooltip\",\n          offset: [0, -8]});\n      tooltip.show();    \n    }\n    setTimeout(function() {\n      if (tooltip) {\n        tooltip.hide();\n        button.removeAttribute(\"data-bs-title\");\n        button.removeAttribute(\"data-bs-toggle\");\n        button.removeAttribute(\"data-bs-placement\");\n      }\n      button.setAttribute(\"title\", currentTitle);\n      button.classList.remove('code-copy-button-checked');\n    }, 1000);\n    // clear code selection\n    e.clearSelection();\n  });\n  function tippyHover(el, contentFn) {\n    const config = {\n      allowHTML: true,\n      content: contentFn,\n      maxWidth: 500,\n      delay: 100,\n      arrow: false,\n      appendTo: function(el) {\n          return el.parentElement;\n      },\n      interactive: true,\n      interactiveBorder: 10,\n      theme: 'quarto',\n      placement: 'bottom-start'\n    };\n    window.tippy(el, config); \n  }\n  const noterefs = window.document.querySelectorAll('a[role=\"doc-noteref\"]');\n  for (var i=0; i&lt;noterefs.length; i++) {\n    const ref = noterefs[i];\n    tippyHover(ref, function() {\n      // use id or data attribute instead here\n      let href = ref.getAttribute('data-footnote-href') || ref.getAttribute('href');\n      try { href = new URL(href).hash; } catch {}\n      const id = href.replace(/^#\\/?/, \"\");\n      const note = window.document.getElementById(id);\n      return note.innerHTML;\n    });\n  }\n      let selectedAnnoteEl;\n      const selectorForAnnotation = ( cell, annotation) =&gt; {\n        let cellAttr = 'data-code-cell=\"' + cell + '\"';\n        let lineAttr = 'data-code-annotation=\"' +  annotation + '\"';\n        const selector = 'span[' + cellAttr + '][' + lineAttr + ']';\n        return selector;\n      }\n      const selectCodeLines = (annoteEl) =&gt; {\n        const doc = window.document;\n        const targetCell = annoteEl.getAttribute(\"data-target-cell\");\n        const targetAnnotation = annoteEl.getAttribute(\"data-target-annotation\");\n        const annoteSpan = window.document.querySelector(selectorForAnnotation(targetCell, targetAnnotation));\n        const lines = annoteSpan.getAttribute(\"data-code-lines\").split(\",\");\n        const lineIds = lines.map((line) =&gt; {\n          return targetCell + \"-\" + line;\n        })\n        let top = null;\n        let height = null;\n        let parent = null;\n        if (lineIds.length &gt; 0) {\n            //compute the position of the single el (top and bottom and make a div)\n            const el = window.document.getElementById(lineIds[0]);\n            top = el.offsetTop;\n            height = el.offsetHeight;\n            parent = el.parentElement.parentElement;\n          if (lineIds.length &gt; 1) {\n            const lastEl = window.document.getElementById(lineIds[lineIds.length - 1]);\n            const bottom = lastEl.offsetTop + lastEl.offsetHeight;\n            height = bottom - top;\n          }\n          if (top !== null && height !== null && parent !== null) {\n            // cook up a div (if necessary) and position it \n            let div = window.document.getElementById(\"code-annotation-line-highlight\");\n            if (div === null) {\n              div = window.document.createElement(\"div\");\n              div.setAttribute(\"id\", \"code-annotation-line-highlight\");\n              div.style.position = 'absolute';\n              parent.appendChild(div);\n            }\n            div.style.top = top - 2 + \"px\";\n            div.style.height = height + 4 + \"px\";\n            let gutterDiv = window.document.getElementById(\"code-annotation-line-highlight-gutter\");\n            if (gutterDiv === null) {\n              gutterDiv = window.document.createElement(\"div\");\n              gutterDiv.setAttribute(\"id\", \"code-annotation-line-highlight-gutter\");\n              gutterDiv.style.position = 'absolute';\n              const codeCell = window.document.getElementById(targetCell);\n              const gutter = codeCell.querySelector('.code-annotation-gutter');\n              gutter.appendChild(gutterDiv);\n            }\n            gutterDiv.style.top = top - 2 + \"px\";\n            gutterDiv.style.height = height + 4 + \"px\";\n          }\n          selectedAnnoteEl = annoteEl;\n        }\n      };\n      const unselectCodeLines = () =&gt; {\n        const elementsIds = [\"code-annotation-line-highlight\", \"code-annotation-line-highlight-gutter\"];\n        elementsIds.forEach((elId) =&gt; {\n          const div = window.document.getElementById(elId);\n          if (div) {\n            div.remove();\n          }\n        });\n        selectedAnnoteEl = undefined;\n      };\n      // Attach click handler to the DT\n      const annoteDls = window.document.querySelectorAll('dt[data-target-cell]');\n      for (const annoteDlNode of annoteDls) {\n        annoteDlNode.addEventListener('click', (event) =&gt; {\n          const clickedEl = event.target;\n          if (clickedEl !== selectedAnnoteEl) {\n            unselectCodeLines();\n            const activeEl = window.document.querySelector('dt[data-target-cell].code-annotation-active');\n            if (activeEl) {\n              activeEl.classList.remove('code-annotation-active');\n            }\n            selectCodeLines(clickedEl);\n            clickedEl.classList.add('code-annotation-active');\n          } else {\n            // Unselect the line\n            unselectCodeLines();\n            clickedEl.classList.remove('code-annotation-active');\n          }\n        });\n      }\n  const findCites = (el) =&gt; {\n    const parentEl = el.parentElement;\n    if (parentEl) {\n      const cites = parentEl.dataset.cites;\n      if (cites) {\n        return {\n          el,\n          cites: cites.split(' ')\n        };\n      } else {\n        return findCites(el.parentElement)\n      }\n    } else {\n      return undefined;\n    }\n  };\n  var bibliorefs = window.document.querySelectorAll('a[role=\"doc-biblioref\"]');\n  for (var i=0; i&lt;bibliorefs.length; i++) {\n    const ref = bibliorefs[i];\n    const citeInfo = findCites(ref);\n    if (citeInfo) {\n      tippyHover(citeInfo.el, function() {\n        var popup = window.document.createElement('div');\n        citeInfo.cites.forEach(function(cite) {\n          var citeDiv = window.document.createElement('div');\n          citeDiv.classList.add('hanging-indent');\n          citeDiv.classList.add('csl-entry');\n          var biblioDiv = window.document.getElementById('ref-' + cite);\n          if (biblioDiv) {\n            citeDiv.innerHTML = biblioDiv.innerHTML;\n          }\n          popup.appendChild(citeDiv);\n        });\n        return popup.innerHTML;\n      });\n    }\n  }\n});\n&lt;/script&gt;\n&lt;/div&gt; &lt;!-- /content --&gt;\n\n&lt;/body&gt;\n\n&lt;/html&gt;"
  },
  {
    "objectID": "EPPS_6356_06.html#section",
    "href": "EPPS_6356_06.html#section",
    "title": "Assignment 6",
    "section": "",
    "text": "&lt;/section&gt;\n&lt;section id=\"section-1\" class=\"level2\"&gt;\n&lt;h2&gt;&lt;/h2&gt;\n&lt;div id=\"quarto-navigation-envelope\" class=\"hidden\"&gt;\n&lt;p&gt;&lt;span class=\"hidden\" data-render-id=\"quarto-int-sidebar-title\"&gt;Sharon Jepkosgei&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar-title\"&gt;Sharon Jepkosgei&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:Home\"&gt;Home&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:/index.html\"&gt;/index.html&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:Courses\"&gt;Courses&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:EPPS 6302: Data Collection &amp; Production\"&gt;EPPS 6302: Data Collection &amp; Production&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:/Data_methods.html\"&gt;/Data_methods.html&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:EPPS 6356: Data Visualization\"&gt;EPPS 6356: Data Visualization&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:/Data_visual.html\"&gt;/Data_visual.html&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:EPPS 6354: Information Management\"&gt;EPPS 6354: Information Management&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:/informanagement.html\"&gt;/informanagement.html&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:PPPE 6321: Economics of Public Policy\"&gt;PPPE 6321: Economics of Public Policy&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:/EconPolicy.html\"&gt;/EconPolicy.html&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:Database project\"&gt;Database project&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:Final presentation\"&gt;Final presentation&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:/Final Presentation.pdf\"&gt;/Final Presentation.pdf&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:Final Paper\"&gt;Final Paper&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:/Sharon_Jepkosgei_Project_epps6354.pdf\"&gt;/Sharon_Jepkosgei_Project_epps6354.pdf&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:Proposal Presentation\"&gt;Proposal Presentation&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:/Database Proposal Presentation.pdf\"&gt;/Database Proposal Presentation.pdf&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:Explore Care App\"&gt;Explore Care App&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:https://sharonjepkosgei.shinyapps.io/ExploreApp/\"&gt;https://sharonjepkosgei.shinyapps.io/ExploreApp/&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:Blog\"&gt;Blog&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar://blog//index.html\"&gt;//blog//index.html&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:CV\"&gt;CV&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:/Sharon CV.pdf\"&gt;/Sharon CV.pdf&lt;/span&gt;&lt;/p&gt;\n&lt;/div&gt;\n&lt;div id=\"quarto-meta-markdown\" class=\"hidden\"&gt;\n&lt;p&gt;&lt;span class=\"hidden\" data-render-id=\"quarto-metatitle\"&gt;Sharon Jepkosgei - Assignment 6&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-twittercardtitle\"&gt;Sharon Jepkosgei - Assignment 6&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-ogcardtitle\"&gt;Sharon Jepkosgei - Assignment 6&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-metasitename\"&gt;Sharon Jepkosgei&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-twittercarddesc\"&gt;&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-ogcardddesc\"&gt;&lt;/span&gt;&lt;/p&gt;\n&lt;/div&gt;\n&lt;/section&gt;\n\n&lt;/main&gt; &lt;!-- /main --&gt;\n&lt;script id = \"quarto-html-after-body\" type=\"application/javascript\"&gt;\nwindow.document.addEventListener(\"DOMContentLoaded\", function (event) {\n  const toggleBodyColorMode = (bsSheetEl) =&gt; {\n    const mode = bsSheetEl.getAttribute(\"data-mode\");\n    const bodyEl = window.document.querySelector(\"body\");\n    if (mode === \"dark\") {\n      bodyEl.classList.add(\"quarto-dark\");\n      bodyEl.classList.remove(\"quarto-light\");\n    } else {\n      bodyEl.classList.add(\"quarto-light\");\n      bodyEl.classList.remove(\"quarto-dark\");\n    }\n  }\n  const toggleBodyColorPrimary = () =&gt; {\n    const bsSheetEl = window.document.querySelector(\"link#quarto-bootstrap\");\n    if (bsSheetEl) {\n      toggleBodyColorMode(bsSheetEl);\n    }\n  }\n  toggleBodyColorPrimary();  \n  const icon = \"\";\n  const anchorJS = new window.AnchorJS();\n  anchorJS.options = {\n    placement: 'right',\n    icon: icon\n  };\n  anchorJS.add('.anchored');\n  const isCodeAnnotation = (el) =&gt; {\n    for (const clz of el.classList) {\n      if (clz.startsWith('code-annotation-')) {                     \n        return true;\n      }\n    }\n    return false;\n  }\n  const clipboard = new window.ClipboardJS('.code-copy-button', {\n    text: function(trigger) {\n      const codeEl = trigger.previousElementSibling.cloneNode(true);\n      for (const childEl of codeEl.children) {\n        if (isCodeAnnotation(childEl)) {\n          childEl.remove();\n        }\n      }\n      return codeEl.innerText;\n    }\n  });\n  clipboard.on('success', function(e) {\n    // button target\n    const button = e.trigger;\n    // don't keep focus\n    button.blur();\n    // flash \"checked\"\n    button.classList.add('code-copy-button-checked');\n    var currentTitle = button.getAttribute(\"title\");\n    button.setAttribute(\"title\", \"Copied!\");\n    let tooltip;\n    if (window.bootstrap) {\n      button.setAttribute(\"data-bs-toggle\", \"tooltip\");\n      button.setAttribute(\"data-bs-placement\", \"left\");\n      button.setAttribute(\"data-bs-title\", \"Copied!\");\n      tooltip = new bootstrap.Tooltip(button, \n        { trigger: \"manual\", \n          customClass: \"code-copy-button-tooltip\",\n          offset: [0, -8]});\n      tooltip.show();    \n    }\n    setTimeout(function() {\n      if (tooltip) {\n        tooltip.hide();\n        button.removeAttribute(\"data-bs-title\");\n        button.removeAttribute(\"data-bs-toggle\");\n        button.removeAttribute(\"data-bs-placement\");\n      }\n      button.setAttribute(\"title\", currentTitle);\n      button.classList.remove('code-copy-button-checked');\n    }, 1000);\n    // clear code selection\n    e.clearSelection();\n  });\n  function tippyHover(el, contentFn) {\n    const config = {\n      allowHTML: true,\n      content: contentFn,\n      maxWidth: 500,\n      delay: 100,\n      arrow: false,\n      appendTo: function(el) {\n          return el.parentElement;\n      },\n      interactive: true,\n      interactiveBorder: 10,\n      theme: 'quarto',\n      placement: 'bottom-start'\n    };\n    window.tippy(el, config); \n  }\n  const noterefs = window.document.querySelectorAll('a[role=\"doc-noteref\"]');\n  for (var i=0; i&lt;noterefs.length; i++) {\n    const ref = noterefs[i];\n    tippyHover(ref, function() {\n      // use id or data attribute instead here\n      let href = ref.getAttribute('data-footnote-href') || ref.getAttribute('href');\n      try { href = new URL(href).hash; } catch {}\n      const id = href.replace(/^#\\/?/, \"\");\n      const note = window.document.getElementById(id);\n      return note.innerHTML;\n    });\n  }\n      let selectedAnnoteEl;\n      const selectorForAnnotation = ( cell, annotation) =&gt; {\n        let cellAttr = 'data-code-cell=\"' + cell + '\"';\n        let lineAttr = 'data-code-annotation=\"' +  annotation + '\"';\n        const selector = 'span[' + cellAttr + '][' + lineAttr + ']';\n        return selector;\n      }\n      const selectCodeLines = (annoteEl) =&gt; {\n        const doc = window.document;\n        const targetCell = annoteEl.getAttribute(\"data-target-cell\");\n        const targetAnnotation = annoteEl.getAttribute(\"data-target-annotation\");\n        const annoteSpan = window.document.querySelector(selectorForAnnotation(targetCell, targetAnnotation));\n        const lines = annoteSpan.getAttribute(\"data-code-lines\").split(\",\");\n        const lineIds = lines.map((line) =&gt; {\n          return targetCell + \"-\" + line;\n        })\n        let top = null;\n        let height = null;\n        let parent = null;\n        if (lineIds.length &gt; 0) {\n            //compute the position of the single el (top and bottom and make a div)\n            const el = window.document.getElementById(lineIds[0]);\n            top = el.offsetTop;\n            height = el.offsetHeight;\n            parent = el.parentElement.parentElement;\n          if (lineIds.length &gt; 1) {\n            const lastEl = window.document.getElementById(lineIds[lineIds.length - 1]);\n            const bottom = lastEl.offsetTop + lastEl.offsetHeight;\n            height = bottom - top;\n          }\n          if (top !== null && height !== null && parent !== null) {\n            // cook up a div (if necessary) and position it \n            let div = window.document.getElementById(\"code-annotation-line-highlight\");\n            if (div === null) {\n              div = window.document.createElement(\"div\");\n              div.setAttribute(\"id\", \"code-annotation-line-highlight\");\n              div.style.position = 'absolute';\n              parent.appendChild(div);\n            }\n            div.style.top = top - 2 + \"px\";\n            div.style.height = height + 4 + \"px\";\n            let gutterDiv = window.document.getElementById(\"code-annotation-line-highlight-gutter\");\n            if (gutterDiv === null) {\n              gutterDiv = window.document.createElement(\"div\");\n              gutterDiv.setAttribute(\"id\", \"code-annotation-line-highlight-gutter\");\n              gutterDiv.style.position = 'absolute';\n              const codeCell = window.document.getElementById(targetCell);\n              const gutter = codeCell.querySelector('.code-annotation-gutter');\n              gutter.appendChild(gutterDiv);\n            }\n            gutterDiv.style.top = top - 2 + \"px\";\n            gutterDiv.style.height = height + 4 + \"px\";\n          }\n          selectedAnnoteEl = annoteEl;\n        }\n      };\n      const unselectCodeLines = () =&gt; {\n        const elementsIds = [\"code-annotation-line-highlight\", \"code-annotation-line-highlight-gutter\"];\n        elementsIds.forEach((elId) =&gt; {\n          const div = window.document.getElementById(elId);\n          if (div) {\n            div.remove();\n          }\n        });\n        selectedAnnoteEl = undefined;\n      };\n      // Attach click handler to the DT\n      const annoteDls = window.document.querySelectorAll('dt[data-target-cell]');\n      for (const annoteDlNode of annoteDls) {\n        annoteDlNode.addEventListener('click', (event) =&gt; {\n          const clickedEl = event.target;\n          if (clickedEl !== selectedAnnoteEl) {\n            unselectCodeLines();\n            const activeEl = window.document.querySelector('dt[data-target-cell].code-annotation-active');\n            if (activeEl) {\n              activeEl.classList.remove('code-annotation-active');\n            }\n            selectCodeLines(clickedEl);\n            clickedEl.classList.add('code-annotation-active');\n          } else {\n            // Unselect the line\n            unselectCodeLines();\n            clickedEl.classList.remove('code-annotation-active');\n          }\n        });\n      }\n  const findCites = (el) =&gt; {\n    const parentEl = el.parentElement;\n    if (parentEl) {\n      const cites = parentEl.dataset.cites;\n      if (cites) {\n        return {\n          el,\n          cites: cites.split(' ')\n        };\n      } else {\n        return findCites(el.parentElement)\n      }\n    } else {\n      return undefined;\n    }\n  };\n  var bibliorefs = window.document.querySelectorAll('a[role=\"doc-biblioref\"]');\n  for (var i=0; i&lt;bibliorefs.length; i++) {\n    const ref = bibliorefs[i];\n    const citeInfo = findCites(ref);\n    if (citeInfo) {\n      tippyHover(citeInfo.el, function() {\n        var popup = window.document.createElement('div');\n        citeInfo.cites.forEach(function(cite) {\n          var citeDiv = window.document.createElement('div');\n          citeDiv.classList.add('hanging-indent');\n          citeDiv.classList.add('csl-entry');\n          var biblioDiv = window.document.getElementById('ref-' + cite);\n          if (biblioDiv) {\n            citeDiv.innerHTML = biblioDiv.innerHTML;\n          }\n          popup.appendChild(citeDiv);\n        });\n        return popup.innerHTML;\n      });\n    }\n  }\n});\n&lt;/script&gt;\n&lt;/div&gt; &lt;!-- /content --&gt;\n\n&lt;/body&gt;\n\n&lt;/html&gt;"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Sharon Jepkosgei",
    "section": "",
    "text": "Sharon Jepkosgei\n\n     Data Analyst/Economist\n\n     Email,  Website     I am a graduate student at the University of Texas at Dallas in the Social Data Analytics and Research program. My main area of interest is healthcare policy and trends.\n\nI am also a research assistant for the Centre for Brain Health currently working on the Brainomics Venture whose aim is to drive economic and social growth through better brain health.\nSkills\n\nData Management\nMicrosoft Office Suite\nStatistical Programming Languages: R, SPSS, and STATA\nRDBMS: SQL\n\nEducation\n\nMSc in Social Data Analytics and Research, Currently Enrolled\n\nThe University of Texas at Dallas\nBS in Economics and Statistics, 2021\n\nKenyatta University\n\nProjects\n\nExplore Care App"
  }
]